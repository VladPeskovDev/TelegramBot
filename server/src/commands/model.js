const axios = require('../utils/axiosInstance');
require('dotenv').config();
const path = require('path');

const DEFAULT_MODEL = { modelName: 'GPT-4o-mini', endpoint: '/api/openai/model_gpt-4o-mini' };

const userModels = {};            // —Ö—Ä–∞–Ω–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å (–¥–ª—è GPT –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
const userState = {};             // —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: 'gpt', 'numerologist' –∏–ª–∏ 'image'
const userNumerologyChoices = {}; // –≤—ã–±–æ—Ä –¥–ª—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∞
const userNumerologyRes = {};     // –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∞
const userImageState = {};        // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, awaiting_image)

function escapeHtml(str = '') {
  return str
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}

/* function convertMarkdownCodeToHtml(text = '') {
  const codeBlockRegex = /```([\w-+]+)?([\s\S]*?)```/g;
  return text.replace(codeBlockRegex, (match, lang, code) => {
    code = code.trim();
    code = escapeHtml(code);
    if (lang) {
      return `<b>${escapeHtml(lang)}</b>\n<pre><code>${code}</code></pre>`;
    } else {
      return `<pre><code>${code}</code></pre>`;
    }
  });
} */

  function sanitizeBotResponse(responseText) {
    // –®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–Ω—É—Ç—Ä–∏
    const codeBlockRegex = /```([\s\S]*?)```/g;
    
    // –ú–∞—Å—Å–∏–≤, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —á–µ—Ä–µ–¥–æ–≤–∞—Ç—å—Å—è: [—Ç–µ–∫—Å—Ç –≤–Ω–µ –∫–æ–¥–∞, –±–ª–æ–∫ –∫–æ–¥–∞, —Ç–µ–∫—Å—Ç –≤–Ω–µ –∫–æ–¥–∞, ...]
    let segments = [];
    let lastIndex = 0;
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –±–ª–æ–∫–∏ "```...```"
    let match;
    while ((match = codeBlockRegex.exec(responseText)) !== null) {
      const index = match.index;
      // –î–æ–±–∞–≤–∏—Ç—å –∫—É—Å–æ–∫ —Ç–µ–∫—Å—Ç–∞ –¥–æ –±–ª–æ–∫–∞ –∫–æ–¥–∞
      segments.push({
        type: 'text',
        content: responseText.slice(lastIndex, index),
      });
      // –î–æ–±–∞–≤–∏—Ç—å —Å–∞–º –±–ª–æ–∫ –∫–æ–¥–∞
      segments.push({
        type: 'code',
        content: match[1], // —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ–∂–¥—É ```
      });
      lastIndex = codeBlockRegex.lastIndex;
    }
    // –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–π—Å—è –∫—É—Å–æ–∫ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞
    if (lastIndex < responseText.length) {
      segments.push({
        type: 'text',
        content: responseText.slice(lastIndex),
      });
    }
    segments = segments.map((segment) => {
      if (segment.type === 'text') {
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç (–∑–∞–º–µ–Ω—è–µ–º <, >, & –∏ —Ç.–¥.)
        return escapeHtml(segment.content);
      } else {
        // –≠—Ç–æ –±–ª–æ–∫ –∫–æ–¥–∞
        // 1. –¢—Ä–∏–º–∏–º
        // 2. –¢–æ–∂–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º <, > –∏ —Ç.–¥.
        const codeContent = escapeHtml(segment.content.trim());
        // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ <pre><code>
        return `<pre><code>${codeContent}</code></pre>`;
      }
    });
  
    // –°–∫–ª–µ–∏–≤–∞–µ–º –≤—Å—ë –æ–±—Ä–∞—Ç–Ω–æ
    return segments.join('');
  }
  

/**
 * –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞.
 * @param {string} label - –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏.
 * @param {string} callbackId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–æ–¥–µ–ª–∏.
 * @param {string} selectedModel - –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å.
 * @returns {object} - –û–±—ä–µ–∫—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
 */
function getModelButton(label, callbackId, selectedModel) {
  const text = callbackId === selectedModel ? `‚úÖ ${label}` : label;
  return { text, callback_data: callbackId };
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å —Ç—Ä–µ–º—è –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ä–∞–±–æ—Ç—ã: GPT, –Ω—É–º–µ—Ä–æ–ª–æ–≥ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
 */
function showMainMenu(bot, chatId, messageId) {
  return bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:', {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: {
      inline_keyboard: [
        [{ text: 'ü§ñ ChatGPT', callback_data: 'GPT_MAIN_CHOICE' }],
        [{ text: 'üîÆ –õ–∏—á–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥', callback_data: 'NUMERO_MAIN_CHOICE' }],
        [{ text: 'üì∏ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', callback_data: 'IMAGE_MAIN_CHOICE' }],
      ],
    },
  });
}

/**
 * –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
 * –ï—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞, –∫ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏—é –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≥–∞–ª–æ—á–∫–∞.
 */
function showImageModelMenu(bot, chatId, messageId) {
  const currentImageModel = userModels[chatId] ? userModels[chatId].modelName : null;
  // –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –≤ callback_data –ø–µ—Ä–µ–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
  const button = getModelButton('üì∏ –ú–æ–¥–µ–ª—å O1 (–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)', 'IMAGE_MODEL_O1', currentImageModel);
  return bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: {
      inline_keyboard: [
        [button],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'BACK_MAIN_CHOICE' }],
      ],
    },
  });
}

module.exports = (bot) => {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /model ‚Äì –≤—ã–≤–æ–¥–∏—Ç –µ–¥–∏–Ω–æ–µ –º–µ–Ω—é
  bot.onText(/\/model/, (msg) => {
    const chatId = String(msg.chat.id);
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
    userState[chatId] = null;
    userNumerologyChoices[chatId] = null;
    userNumerologyRes[chatId] = null;
    userImageState[chatId] = null;
    // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å, —á—Ç–æ–±—ã –∑–∞–ø–æ–º–∏–Ω–∞–ª–æ—Å—å –∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

    const options = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'ü§ñ ChatGPT', callback_data: 'GPT_MAIN_CHOICE' }],
          [{ text: 'üîÆ –õ–∏—á–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥', callback_data: 'NUMERO_MAIN_CHOICE' }],
          [{ text: 'üì∏ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', callback_data: 'IMAGE_MAIN_CHOICE' }],
        ],
      },
    };

    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:', options);
  });

  bot.on('callback_query', async (callbackQuery) => {
    const chatId = String(callbackQuery.message.chat.id);
    const messageId = callbackQuery.message.message_id;
    const data = callbackQuery.data;

    if (data === 'BACK_MAIN_CHOICE') {
      userState[chatId] = null;
      userImageState[chatId] = null;
      return showMainMenu(bot, chatId, messageId);
    }

    // –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    if (data === 'GPT_MAIN_CHOICE') {
      userState[chatId] = 'gpt';
      const currentModel = userModels[chatId] ? userModels[chatId].modelName : DEFAULT_MODEL.modelName;
      return bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å GPT:', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [
              getModelButton('GPT-o3-mini', 'GPT-o3-mini', currentModel),
              getModelButton('GPT-4o-mini', 'GPT-4o-mini', currentModel),
            ],
            [
              getModelButton('GPT-4o', 'GPT-4o', currentModel),
              getModelButton('GPT-o1', 'GPT-o1', currentModel),
            ],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'BACK_MAIN_CHOICE' }],
          ],
        },
      });
    }

    if (data === 'NUMERO_MAIN_CHOICE') {
      userState[chatId] = 'numerologist';
      userModels[chatId] = null;
      return bot.editMessageText(
        '<b>–í—ã –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –º–æ–¥–µ–ª—å ¬´–õ–∏—á–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥¬ª.</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç–∏–ø–æ–≤ —Ä–∞–∑–±–æ—Ä–∞:',
        {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üó∫Ô∏è –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞', callback_data: 'numerology_map' }],
              [{ text: 'üé≤ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞—Å–∫–ª–∞–¥', callback_data: 'numerology_spread' }],
              [{ text: 'ü™û –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç', callback_data: 'numerology_portrait' }],
              [{ text: 'üåÄ –ú–∞—Ç—Ä–∏—Ü–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞', callback_data: 'numerology_pythagoras' }],
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'BACK_MAIN_CHOICE' }],
            ],
          },
        }
      );
    }

    if (data === 'IMAGE_MAIN_CHOICE') {
      userState[chatId] = 'image';
      // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ —Ä–∞–Ω–µ–µ
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –≥–∞–ª–æ—á–∫–æ–π, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞
      return showImageModelMenu(bot, chatId, messageId);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ GPT –º–æ–¥–µ–ª–µ–π
    if (userState[chatId] === 'gpt') {
      let endpoint;
      switch (data) {
        case 'GPT-o3-mini':
          endpoint = '/api/openai/o3-mini';
          break;
        case 'GPT-4o':
          endpoint = '/api/openai/model4';
          break;
        case 'GPT-4o-mini':
          endpoint = '/api/openai/model_gpt-4o-mini';
          break;
        case 'GPT-o1':
          endpoint = '/api/openaiO1/model_o1';
          break;
        default:
          return bot.answerCallbackQuery(callbackQuery.id, {
            text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å.',
          });
      }
      userModels[chatId] = { modelName: data, endpoint };
      const keyboard = {
        inline_keyboard: [
          [
            getModelButton('GPT-o3-mini', 'GPT-o3-mini', data),
            getModelButton('GPT-4o-mini', 'GPT-4o-mini', data),
          ],
          [
            getModelButton('GPT-4o', 'GPT-4o', data),
            getModelButton('GPT-o1', 'GPT-o1', data),
          ],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'BACK_MAIN_CHOICE' }],
        ],
      };
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: `–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å ${data}.`,
      });
      return bot.editMessageText(`–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å GPT:\n\n–í—ã–±—Ä–∞–Ω–∞: ‚úÖ ${data}`, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard,
      });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∞
    if (userState[chatId] === 'numerologist') {
      let choiceText = '';
      let resText = '';
      switch (data) {
        case 'numerology_map':
          choiceText = '–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ ‚Äî –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏ (—á–∏—Å–ª–∞ –ñ–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ü—É—Ç–∏, –°—É–¥—å–±—ã, –õ–∏—á–Ω–æ—Å—Ç–∏ –∏ —Ç.–¥.).';
          resText = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ</b> –∏ <b>–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</b>.';
          break;
        case 'numerology_spread':
          choiceText = '–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞—Å–∫–ª–∞–¥ ‚Äî –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã (—Ñ–∏–Ω–∞–Ω—Å—ã, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –∑–¥–æ—Ä–æ–≤—å–µ, –∫–∞—Ä—å–µ—Ä–∞ –∏ —Ç.–¥.).';
          resText = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å: <b>–§–ò–û</b>, <b>–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</b> –∏ —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É/–≤–æ–ø—Ä–æ—Å.';
          break;
        case 'numerology_portrait':
          choiceText = '–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç ‚Äî –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏.';
          resText = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–§–ò–û</b> –∏ <b>–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</b>.';
          break;
        case 'numerology_pythagoras':
          choiceText = '–ú–∞—Ç—Ä–∏—Ü–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞ ‚Äî –º–µ—Ç–æ–¥ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è.';
          resText = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–§–ò–û</b> –∏ <b>–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</b>.';
          break;
        default:
          return bot.answerCallbackQuery(callbackQuery.id, {
            text: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä.',
          });
      }
      userNumerologyChoices[chatId] = choiceText;
      userNumerologyRes[chatId] = resText;
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: `‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: ${choiceText}`,
      });
      return bot.sendMessage(
        chatId,
        `üîÆ <b>${choiceText}</b>\n\n${resText}`,
        { parse_mode: 'HTML' }
      );
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if (userState[chatId] === 'image') {
      if (data === 'IMAGE_MODEL_O1') {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞–∫ –æ–±—ä–µ–∫—Ç
        userModels[chatId] = { modelName: 'IMAGE_MODEL_O1', endpoint: '/api/imagebot/process-image' };
        userImageState[chatId] = 'awaiting_image';
        await bot.answerCallbackQuery(callbackQuery.id, { text: '–í—ã –≤—ã–±—Ä–∞–ª–∏ –ú–æ–¥–µ–ª—å O1 (–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π). –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.' });
        return bot.sendMessage(chatId, 'üì§ *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∏ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ!*', { parse_mode: 'Markdown' });
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('message', async (msg) => {
    const chatId = String(msg.chat.id);
    const userMessage = msg.text;

    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–æ–º–∞–Ω–¥—ã ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if (!userMessage || userMessage.startsWith('/')) {
      return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç,
    // –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
    if (userState[chatId] === 'image' && !msg.photo) {
      return bot.sendMessage(chatId, '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "üîô –ù–∞–∑–∞–¥" –¥–ª—è —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞.', { parse_mode: 'Markdown' });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∞
    if (userState[chatId] === 'numerologist') {
      let processingMessageId;
      try {
        const processingMessage = await bot.sendMessage(
          chatId,
          '‚è≥ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</b>',
          { parse_mode: 'HTML' }
        );
        processingMessageId = processingMessage.message_id;

        const response = await axios.post('/api/openai/numerologist', {
          chatId,
          type: userNumerologyChoices[chatId],
          userMessage,
        });

        if (processingMessageId) {
          try {
            await bot.deleteMessage(chatId, processingMessageId);
          } catch (err) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', err.message);
          }
        }
        let botResponse = response.data.reply || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞...';
        botResponse = sanitizeBotResponse(botResponse);
        if (botResponse.length <= 4000) {
          bot.sendMessage(
            chatId,
            `ü§ñ <b>–û—Ç–≤–µ—Ç:</b>\n\n${botResponse}`,
            { parse_mode: 'HTML' }
          );
        } else {
          const buffer = Buffer.from(botResponse, 'utf8');
          await bot.sendDocument(
            chatId,
            buffer,
            { caption: '–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏:' },
            { filename: 'reply.txt', contentType: 'text/plain' }
          );
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –∑–∞–ø—Ä–æ—Å–µ:', error);
        return bot.sendMessage(
          chatId,
          '‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –∑–∞–ø—Ä–æ—Å–µ.</b>',
          { parse_mode: 'HTML' }
        );
      } finally {
        userState[chatId] = null;
        delete userNumerologyChoices[chatId];
        delete userNumerologyRes[chatId];
      }
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è GPT (—á–∞—Ç) ‚Äì –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ GPT
    if (userState[chatId] === 'gpt') {
      const userModel = userModels[chatId] || DEFAULT_MODEL;
      let processingMessageId;
      try {
        const processingMessage = await bot.sendMessage(
          chatId,
          '‚è≥ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</b>',
          { parse_mode: 'HTML' }
        );
        processingMessageId = processingMessage.message_id;
      } catch (err) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', err);
      }
      try {
        const response = await axios.post(userModel.endpoint, {
          chatId,
          userMessage,
          modelName: userModel.modelName,
        });
        if (processingMessageId) {
          try {
            await bot.deleteMessage(chatId, processingMessageId);
          } catch (err) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', err.message);
          }
        }
        let botResponse = response.data.reply || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞...';
        botResponse = sanitizeBotResponse(botResponse);
        const byteLength = Buffer.byteLength(botResponse, 'utf-8');
        if (byteLength <= 4000) {
          bot.sendMessage(
            chatId,
            `<b>–û—Ç–≤–µ—Ç:</b>\n\n${botResponse}`,
            { parse_mode: 'HTML' }
          );
        } else {
          const buffer = Buffer.from(botResponse, 'utf8');
          await bot.sendDocument(
            chatId,
            buffer,
            { caption: '–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏:' },
            { filename: 'reply.txt', contentType: 'text/plain' }
          );
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ GPT-—Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        if (processingMessageId) {
          try {
            await bot.deleteMessage(chatId, processingMessageId);
          } catch (delErr) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', delErr.message);
          }
        }
        const errorMessage = error.response?.data?.error || '‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>';
        bot.sendMessage(chatId, errorMessage, { parse_mode: 'HTML' });
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ ¬´–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π¬ª
bot.on('photo', async (msg) => {
  const chatId = String(msg.chat.id);
  // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç userImageState
  if (userState[chatId] === 'image') {
    const fileId = msg.photo[msg.photo.length - 1].file_id;
    //console.log(`üì∏ –ü–æ–ª—É—á–µ–Ω fileId: ${fileId}`);
    
    try {
      const file = await bot.getFile(fileId);
      const botToken = process.env.TELEGRAM_BOT_TOKEN;
      if (!botToken) {
        console.error('‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        return bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞.');
      }
      
      const fileUrl = `https://api.telegram.org/file/bot${botToken}/${file.file_path}`;
      //console.log(`üîó Telegram File URL: ${fileUrl}`);

      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      const response = await axios({
        method: 'get',
        url: fileUrl,
        responseType: 'arraybuffer'
      });
      const imageBuffer = Buffer.from(response.data, 'binary');

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME‚Äë—Ç–∏–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
      const ext = path.extname(file.file_path).toLowerCase();
      let mimeType = 'image/jpeg'; // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (ext === '.png') {
        mimeType = 'image/png';
      } else if (ext === '.gif') {
        mimeType = 'image/gif';
      } else if (ext === '.webp') {
        mimeType = 'image/webp';
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É Base64 —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º MIME‚Äë—Ç–∏–ø–æ–º
      const base64Image = `data:${mimeType};base64,${imageBuffer.toString('base64')}`;
      
      let processingMessageId;
      try {
        const processingMessage = await bot.sendMessage(chatId, '‚è≥ *–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...*', { parse_mode: 'Markdown' });
        processingMessageId = processingMessage.message_id;
      } catch (err) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è:', err);
      }
      
      //console.log(`üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ API —Å Base64`);
  
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ API
      const apiResponse = await axios.post('/api/imagebot/process-image', {
        chatId,
        base64Image,
        userMessage: '–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–º —Ñ–æ—Ç–æ?',
      });
      
      if (processingMessageId) {
        await bot.deleteMessage(chatId, processingMessageId);
      }
      
      const botResponse = apiResponse.data.reply || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞...';
      bot.sendMessage(chatId, `üì∏ *–û—Ç–≤–µ—Ç:* \n\n${botResponse}`, { parse_mode: 'Markdown' });
      
      // –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ
      userImageState[chatId] = 'awaiting_image';
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ:', error);
      bot.sendMessage(chatId, '‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã.*', { parse_mode: 'Markdown' });
    }
  }
});
};

