const axios = require('../utils/axiosInstance');

// –•—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userModels = {};

module.exports = (bot) => {
  // –ö–æ–º–∞–Ω–¥–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
  bot.onText(/\/model/, (msg) => {
    const chatId = String(msg.chat.id);

    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'ü§ñ GPT-3.5', callback_data: 'GPT-3.5' },
            { text: 'üèÖ GPT-4', callback_data: 'GPT-4' },
            { text: '‚ö° gpt-4o-mini', callback_data: 'gpt-4o-mini' },
          ],
        ],
      },
    };

    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:', options);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
  bot.on('callback_query', async (callbackQuery) => {
    const chatId = String(callbackQuery.message.chat.id);
    const chosenModel = callbackQuery.data;

    let endpoint;

    switch (chosenModel) {
      case 'GPT-3.5':
        endpoint = '/api/openai/model3.5';
        break;
      case 'GPT-4':
        endpoint = '/api/openai/model4';
        break;
      case 'gpt-4o-mini':
        endpoint = '/api/openai/model_gpt-4o-mini';
        break;
      default:
        bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å.' });
        return;
    }

    userModels[chatId] = { modelName: chosenModel, endpoint };

    bot.answerCallbackQuery(callbackQuery.id, { text: `–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å ${chosenModel}.` });
    bot.sendMessage(chatId, `–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –º–æ–¥–µ–ª—å ${chosenModel}.`);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('message', async (msg) => {
    const chatId = String(msg.chat.id);
    const userMessage = msg.text;

    if (!userMessage || userMessage.startsWith('/')) {
      return;
    }

    const userModel = userModels[chatId] || { modelName: 'GPT-3.5', endpoint: '/api/openai/model3.5' };

    try {
      const response = await axios.post(userModel.endpoint, {
        chatId,
        userMessage,
        modelName: userModel.modelName,
      });

      const botResponse = response.data.reply;

      bot.sendMessage(chatId, botResponse);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      const errorMessage =
        error.response?.data?.error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      bot.sendMessage(chatId, errorMessage);
    }
  });
};
