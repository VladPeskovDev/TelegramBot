 const axios = require('../utils/axiosInstance');

// –•—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userModels = {};

module.exports = (bot) => {
  // –ö–æ–º–∞–Ω–¥–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
  bot.onText(/\/model/, (msg) => {
    const chatId = String(msg.chat.id);
    

    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'ü§ñ GPT-3.5', callback_data: 'GPT-3.5' },
            { text: 'üß† GPT-4o', callback_data: 'GPT-4o' }
          ],
          [
            { text: '‚ö° gpt-4o-mini', callback_data: 'gpt-4o-mini' },
            { text: 'üÜï o1-mini-NEW', callback_data: 'o1-mini-NEW' }
          ]
        ]
      }
    };
    
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:', options);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
  bot.on('callback_query', async (callbackQuery) => {
    const chatId = String(callbackQuery.message.chat.id);
    const chosenModel = callbackQuery.data;

    let endpoint;

    switch (chosenModel) {
      case 'GPT-3.5':
        endpoint = '/api/openai/model3.5';
        break;
      case 'GPT-4o':
        endpoint = '/api/openai/model4';
        break;
      case 'gpt-4o-mini':
        endpoint = '/api/openai/model_gpt-4o-mini';
        break;
      case 'o1-mini-NEW':
        endpoint = '/api/openaiO1/model_o1-mini-2024-09-12';
        break;
      default:
        bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å.' });
        return;
    }

    userModels[chatId] = { modelName: chosenModel, endpoint };

    bot.answerCallbackQuery(callbackQuery.id, { text: `–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å ${chosenModel}.` });
    bot.sendMessage(chatId, `–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –º–æ–¥–µ–ª—å ${chosenModel}.`);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = String(msg.chat.id);
  const userMessage = msg.text;

  if (!userMessage || userMessage.startsWith('/')) {
    return;
  }

  const userModel = userModels[chatId] || { modelName: 'GPT-3.5', endpoint: '/api/openai/model3.5' };

  let processingMessageId;

  try {
    // üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const processingMessage = await bot.sendMessage(
      chatId,
      '‚è≥ *–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...*',
      { parse_mode: 'Markdown' }
    );

    processingMessageId = processingMessage.message_id;

    // ‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç —É OpenAI
    const response = await axios.post(userModel.endpoint, {
      chatId,
      userMessage,
      modelName: userModel.modelName,
    });

    const botResponse = response.data.reply;

    try {
      await bot.deleteMessage(chatId, processingMessageId);
    } catch (err) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', err.message);
    }
    
    if (botResponse.length <= 4000) {
      bot.sendMessage(
        chatId,
        `ü§ñ *–û—Ç–≤–µ—Ç:* \n${botResponse}`,
        { parse_mode: 'Markdown' }
      );
    } else {
      // –û—Ç–≤–µ—Ç –¥–ª–∏–Ω–Ω—ã–π ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≤–∏–¥–µ txt-—Ñ–∞–π–ª–∞
      const buffer = Buffer.from(botResponse, 'utf8'); 

      try {
      await bot.deleteMessage(chatId, processingMessageId);
          } catch (err) {
         console.warn('(catch) –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', err.message);
         }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç (txt)
       await bot.sendDocument(
       chatId,
       buffer,                          
      { caption: '–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –ø–æ—ç—Ç–æ–º—É –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏:', parse_mode: 'Markdown' },  
      { filename: 'reply.txt', contentType: 'text/plain' }      
      );

    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);

   
  // ‚ùó –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  if (processingMessageId) {
    try {
      await bot.deleteMessage(chatId, processingMessageId);
    } catch (delErr) {
      console.warn('‚ö†Ô∏è (catch) –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', delErr.message);
    }
  }

    const errorMessage =
      error.response?.data?.error || '‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.*';

    bot.sendMessage(chatId, errorMessage, { parse_mode: 'Markdown' });
  }
});
};

/*

const axios = require('../utils/axiosInstance');
const { userState, userModels } = require('./userState');

module.exports = (bot) => {
  // –ö–æ–º–∞–Ω–¥–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
  bot.onText(/\/model/, (msg) => {
    const chatId = String(msg.chat.id);
    userState[chatId] = 'gpt'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'ü§ñ GPT-3.5', callback_data: 'GPT-3.5' },
            { text: 'üß† GPT-4o', callback_data: 'GPT-4o' }
          ],
          [
            { text: '‚ö° gpt-4o-mini', callback_data: 'gpt-4o-mini' },
            { text: 'üÜï o1-mini-NEW', callback_data: 'o1-mini-NEW' }
          ]
        ]
      }
    };
    
    bot.sendMessage(chatId, 'üõ† *–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å GPT:*', { parse_mode: 'Markdown', ...options });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
  bot.on('callback_query', async (callbackQuery) => {
    const chatId = String(callbackQuery.message.chat.id);
    if (userState[chatId] !== 'gpt') return;

    const chosenModel = callbackQuery.data;

    let endpoint;

    switch (chosenModel) {
      case 'GPT-3.5':
        endpoint = '/api/openai/model3.5';
        break;
      case 'GPT-4o':
        endpoint = '/api/openai/model4';
        break;
      case 'gpt-4o-mini':
        endpoint = '/api/openai/model_gpt-4o-mini';
        break;
      case 'o1-mini-NEW':
        endpoint = '/api/openaiO1/model_o1-mini-2024-09-12';
        break;
      default:
        bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å.' });
        return;
    }

    userModels[chatId] = { modelName: chosenModel, endpoint };

    bot.answerCallbackQuery(callbackQuery.id, { text: `‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å ${chosenModel}.` });
    bot.sendMessage(chatId, `ü§ñ *–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –º–æ–¥–µ–ª—å ${chosenModel}.*`, { parse_mode: 'Markdown' });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è GPT
  bot.on('message', async (msg) => {
    const chatId = String(msg.chat.id);
    if (userState[chatId] !== 'gpt') return; // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    const userMessage = msg.text;
    if (!userMessage || userMessage.startsWith('/')) return;

    const userModel = userModels[chatId] || { modelName: 'GPT-3.5', endpoint: '/api/openai/model3.5' };

    let processingMessageId;

    try {
      const processingMessage = await bot.sendMessage(
        chatId,
        '‚è≥ *–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å...*',
        { parse_mode: 'Markdown' }
      );

      processingMessageId = processingMessage.message_id;

      const response = await axios.post(userModel.endpoint, {
        chatId,
        userMessage,
        modelName: userModel.modelName,
      });

      const botResponse = response.data.reply;

      await bot.deleteMessage(chatId, processingMessageId);

      if (botResponse.length <= 4000) {
        bot.sendMessage(chatId, `ü§ñ *–û—Ç–≤–µ—Ç:* \n${botResponse}`, { parse_mode: 'Markdown' });
      } else {
        const buffer = Buffer.from(botResponse, 'utf8');
        await bot.sendDocument(
          chatId,
          buffer,
          { caption: '–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –ø–æ—ç—Ç–æ–º—É –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏:' },
          { filename: 'reply.txt', contentType: 'text/plain' }
        );
      }

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      delete userModels[chatId];
      delete userState[chatId];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      await bot.deleteMessage(chatId, processingMessageId);
      bot.sendMessage(chatId, '‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.*', { parse_mode: 'Markdown' });
    }
  });
};




*/