const axios = require('../utils/axiosInstance');
const userModels = {};
const DEFAULT_MODEL = { modelName: 'GPT-3.5 Turbo', endpoint: '/api/openai/model3.5' };
const userState = {};
const userNumerologyChoices = {};
const userNumerologyRes = {};

function escapeHtml(str = '') {
  return str
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}

function convertMarkdownCodeToHtml(text = '') {
  const codeBlockRegex = /```([\w-+]+)?([\s\S]*?)```/g;

  return text.replace(codeBlockRegex, (match, lang, code) => {
    code = code.trim();
    code = escapeHtml(code);

    if (lang) {
      return `<pre><code class="language-${lang}">${code}</code></pre>`;
    } else {
      return `<pre><code>${code}</code></pre>`;
    }
  });
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º (–≥–∞–ª–æ—á–∫–æ–π),
 * –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞.
 * @param {string} modelName - –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏.
 * @param {string} selectedModel - –ù–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.
 * @returns {object} - –û–±—ä–µ–∫—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
 */
function getModelButton(modelName, selectedModel) {
  const text = modelName === selectedModel ? `‚úÖ ${modelName}` : modelName;
  return { text, callback_data: modelName };
}

function showMainMenu(bot, chatId, messageId) {
  return bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:', {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: {
      inline_keyboard: [
        [{ text: 'ü§ñ GPT', callback_data: 'GPT_MAIN_CHOICE' }],
        [{ text: 'üîÆ –õ–∏—á–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥', callback_data: 'NUMERO_MAIN_CHOICE' }],
      ],
    },
  });
}

module.exports = (bot) => {
  bot.onText(/\/model/, (msg) => {
    const chatId = String(msg.chat.id);

    userState[chatId] = null;
    userNumerologyChoices[chatId] = null;
    userNumerologyRes[chatId] = null;

    const options = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'ü§ñ ChatGPT', callback_data: 'GPT_MAIN_CHOICE' }],
          [{ text: 'üîÆ –õ–∏—á–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥', callback_data: 'NUMERO_MAIN_CHOICE' }],
        ],
      },
    };

    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:', options);
  });

  bot.on('callback_query', async (callbackQuery) => {
    const chatId = String(callbackQuery.message.chat.id);
    const messageId = callbackQuery.message.message_id;
    const data = callbackQuery.data;

    if (data === 'BACK_MAIN_CHOICE') {
      userState[chatId] = null;
      return showMainMenu(bot, chatId, messageId);
    }

    if (data === 'GPT_MAIN_CHOICE') {
      userState[chatId] = 'gpt';
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±–∏—Ä–∞–ª –º–æ–¥–µ–ª—å, –±–µ—Ä—ë–º –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏–Ω–∞—á–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
      const currentModel = userModels[chatId] ? userModels[chatId].modelName : DEFAULT_MODEL.modelName;
      return bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å GPT:', {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        reply_markup: {
          inline_keyboard: [
            [
              getModelButton('GPT-3.5 Turbo', currentModel),
              getModelButton('GPT-4o-mini', currentModel),
            ],
            [
              getModelButton('GPT-4o', currentModel),
              getModelButton('GPT-o1-mini', currentModel),
            ],
            [
              { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'BACK_MAIN_CHOICE' },
            ],
          ],
        },
      });
    }

    if (data === 'NUMERO_MAIN_CHOICE') {
      userState[chatId] = 'numerologist';
      userModels[chatId] = null;

      return bot.editMessageText(
        '<b>–í—ã –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –º–æ–¥–µ–ª—å ¬´–õ–∏—á–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥¬ª.</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç–∏–ø–æ–≤ —Ä–∞–∑–±–æ—Ä–∞:',
        {
          chat_id: chatId,
          message_id: callbackQuery.message.message_id,
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üó∫Ô∏è –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞', callback_data: 'numerology_map' }],
              [{ text: 'üé≤ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞—Å–∫–ª–∞–¥', callback_data: 'numerology_spread' }],
              [{ text: 'ü™û –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç', callback_data: 'numerology_portrait' }],
              [{ text: 'üåÄ –ú–∞—Ç—Ä–∏—Ü–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞', callback_data: 'numerology_pythagoras' }],
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'BACK_MAIN_CHOICE' }],
            ],
          },
        }
      );
    }

    if (userState[chatId] === 'gpt') {
      let endpoint;
      switch (data) {
        case 'GPT-3.5 Turbo':
          endpoint = '/api/openai/model3.5';
          break;
        case 'GPT-4o':
          endpoint = '/api/openai/model4';
          break;
        case 'GPT-4o-mini':
          endpoint = '/api/openai/model_gpt-4o-mini';
          break;
        case 'GPT-o1-mini':
          endpoint = '/api/openaiO1/model_o1-mini-2024-09-12';
          break;
        default:
          return bot.answerCallbackQuery(callbackQuery.id, {
            text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å.',
          });
      }

      userModels[chatId] = { modelName: data, endpoint };

      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–º–µ—Ç–∫–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
      const keyboard = {
        inline_keyboard: [
          [
            getModelButton('GPT-3.5 Turbo', data),
            getModelButton('GPT-4o-mini', data),
          ],
          [
            getModelButton('GPT-4o', data),
            getModelButton('GPT-o1-mini', data),
          ],
          [
            { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'BACK_MAIN_CHOICE' },
          ],
        ],
      };

      await bot.answerCallbackQuery(callbackQuery.id, {
        text: `–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å ${data}.`,
      });

      return bot.editMessageText(`–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å GPT:\n\n–í—ã–±—Ä–∞–Ω–∞: ‚úÖ ${data}`, {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        reply_markup: keyboard,
      });
    }

    if (userState[chatId] === 'numerologist') {
      let choiceText = '';
      let resText = '';

      switch (data) {
        case 'numerology_map':
          choiceText = '–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ ‚Äî –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏ (—á–∏—Å–ª–∞ –ñ–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ü—É—Ç–∏, –°—É–¥—å–±—ã, –õ–∏—á–Ω–æ—Å—Ç–∏ –∏ —Ç.–¥.).';
          resText = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ</b> –∏ <b>–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</b>.';
          break;
        case 'numerology_spread':
          choiceText = '–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞—Å–∫–ª–∞–¥ ‚Äî –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã (—Ñ–∏–Ω–∞–Ω—Å—ã, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –∑–¥–æ—Ä–æ–≤—å–µ, –∫–∞—Ä—å–µ—Ä–∞ –∏ —Ç.–¥.).';
          resText = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å: <b>–§–ò–û</b>, <b>–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</b> –∏ —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É/–≤–æ–ø—Ä–æ—Å.';
          break;
        case 'numerology_portrait':
          choiceText = '–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç ‚Äî –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏.';
          resText = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–§–ò–û</b> –∏ <b>–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</b>.';
          break;
        case 'numerology_pythagoras':
          choiceText = '–ú–∞—Ç—Ä–∏—Ü–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞ ‚Äî –º–µ—Ç–æ–¥ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è.';
          resText = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–§–ò–û</b> –∏ <b>–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</b>.';
          break;
        default:
          return bot.answerCallbackQuery(callbackQuery.id, {
            text: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä.',
          });
      }

      userNumerologyChoices[chatId] = choiceText;
      userNumerologyRes[chatId] = resText;

      await bot.answerCallbackQuery(callbackQuery.id, {
        text: `‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: ${choiceText}`,
      });

      return bot.sendMessage(
        chatId,
        `üîÆ <b>${choiceText}</b>\n\n${resText}`,
        { parse_mode: 'HTML' }
      );
    }
  });

  bot.on('message', async (msg) => {
    const chatId = String(msg.chat.id);
    const userMessage = msg.text;

    if (!userMessage || userMessage.startsWith('/')) {
      return;
    }

    if (userState[chatId] === 'numerologist') {
      let processingMessageId;

      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ¬´–≤—Ä–µ–º–µ–Ω–Ω–æ–µ¬ª —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ message_id
        const processingMessage = await bot.sendMessage(
          chatId,
          '‚è≥ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</b>',
          { parse_mode: 'HTML' }
        );
        processingMessageId = processingMessage.message_id;

        // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É –Ω—É–º–µ—Ä–æ–ª–æ–≥–∞
        const response = await axios.post('/api/openai/numerologist', {
          chatId,
          type: userNumerologyChoices[chatId],
          userMessage,
        });

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (processingMessageId) {
          try {
            await bot.deleteMessage(chatId, processingMessageId);
          } catch (err) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', err.message);
          }
        }

        let botResponse = response.data.reply || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞...';

        botResponse = convertMarkdownCodeToHtml(botResponse);

        if (botResponse.length <= 4000) {
          bot.sendMessage(
            chatId,
            `ü§ñ <b>–û—Ç–≤–µ—Ç:</b>\n\n${botResponse}`,
            { parse_mode: 'HTML' }
          );
        } else {
          const buffer = Buffer.from(botResponse, 'utf8');
          await bot.sendDocument(
            chatId,
            buffer,
            {
              caption: '–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏:',
            },
            { filename: 'reply.txt', contentType: 'text/plain' }
          );
        }

      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –∑–∞–ø—Ä–æ—Å–µ:', error);
        return bot.sendMessage(
          chatId,
          '‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –∑–∞–ø—Ä–æ—Å–µ.</b>',
          { parse_mode: 'HTML' }
        );
      } finally {
        userState[chatId] = null;
        delete userNumerologyChoices[chatId];
        delete userNumerologyRes[chatId];
      }
      return;
    }

    const userModel = userModels[chatId] || DEFAULT_MODEL;
    
    let processingMessageId;
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
      const processingMessage = await bot.sendMessage(
        chatId,
        '‚è≥ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</b>',
        { parse_mode: 'HTML' }
      );
      processingMessageId = processingMessage.message_id;
    } catch (err) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', err);
    }

    try {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ (–∏–ª–∏ –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
      const response = await axios.post(userModel.endpoint, {
        chatId,
        userMessage,
        modelName: userModel.modelName,
      });

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
      if (processingMessageId) {
        try {
          await bot.deleteMessage(chatId, processingMessageId);
        } catch (err) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', err.message);
        }
      }

      let botResponse = response.data.reply || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞...';

      botResponse = convertMarkdownCodeToHtml(botResponse);

      if (botResponse.length <= 4000) {
        bot.sendMessage(
          chatId,
          `ü§ñ <b>–û—Ç–≤–µ—Ç:</b>\n\n${botResponse}`,
          { parse_mode: 'HTML' }
        );
      } else {
        const buffer = Buffer.from(botResponse, 'utf8');
        await bot.sendDocument(
          chatId,
          buffer,
          {
            caption: '–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏:',
          },
          { filename: 'reply.txt', contentType: 'text/plain' }
        );
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ GPT-—Å–æ–æ–±—â–µ–Ω–∏—è:', error);

      if (processingMessageId) {
        try {
          await bot.deleteMessage(chatId, processingMessageId);
        } catch (delErr) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', delErr.message);
        }
      }

      const errorMessage = error.response?.data?.error || '‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>';

      bot.sendMessage(chatId, errorMessage, { parse_mode: 'HTML' });
    }
  });
};





/* const axios = require('../utils/axiosInstance');
const userModels = {}; 
const DEFAULT_MODEL = { modelName: 'GPT-3.5 Turbo', endpoint: '/api/openai/model3.5' };
const userState = {};                 
const userNumerologyChoices = {};     
const userNumerologyRes = {};         

function showMainMenu(bot, chatId, messageId) {
  return bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:', {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: {
      inline_keyboard: [
        [{ text: 'ü§ñ GPT', callback_data: 'GPT_MAIN_CHOICE' }],
        [{ text: 'üîÆ –õ–∏—á–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥', callback_data: 'NUMERO_MAIN_CHOICE' }],
      ],
    },
  });
}

module.exports = (bot) => {
  bot.onText(/\/model/, (msg) => {
    const chatId = String(msg.chat.id);

    userState[chatId] = null;
    userNumerologyChoices[chatId] = null;
    userNumerologyRes[chatId] = null;

    const options = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'ü§ñ ChatGPT', callback_data: 'GPT_MAIN_CHOICE' }],
          [{ text: 'üîÆ –õ–∏—á–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥', callback_data: 'NUMERO_MAIN_CHOICE' }],
        ],
      },
    };

    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:', options);
  });

  // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query –ø—Ä–∏ –≤—ã–±–æ—Ä–µ /model
  
  bot.on('callback_query', async (callbackQuery) => {
    const chatId = String(callbackQuery.message.chat.id);
    const messageId = callbackQuery.message.message_id;
    const data = callbackQuery.data;

    if (data === 'BACK_MAIN_CHOICE') {
      userState[chatId] = null;
      return showMainMenu(bot, chatId, messageId);
    }

    if (data === 'GPT_MAIN_CHOICE') {
      userState[chatId] = 'gpt';
      return bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å GPT:', {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'ü§ñ GPT-3.5 Turbo', callback_data: 'GPT-3.5 Turbo' },
              { text: '‚ö° GPT-4o-mini', callback_data: 'GPT-4o-mini' },
            ],
            [
              { text: 'üß† GPT-4o', callback_data: 'GPT-4o' },
              { text: 'üÜï GPT-o1-mini', callback_data: 'GPT-o1-mini' },
            ],
            [
              { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'BACK_MAIN_CHOICE' },
            ],
          ],
        },
      });
    }

    if (data === 'NUMERO_MAIN_CHOICE') {
      userState[chatId] = 'numerologist';
      userModels[chatId] = null;
      //console.log(`User ${chatId} switched to numerologist. GPT model reset.`); 

      return bot.editMessageText(
        'üîÆ *–í—ã –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –º–æ–¥–µ–ª—å "–õ–∏—á–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥".* \n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç–∏–ø–æ–≤ —Ä–∞–∑–±–æ—Ä–∞:',
        {
          chat_id: chatId,
          message_id: callbackQuery.message.message_id,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { 
                  text: 'üó∫Ô∏è –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞', 
                  callback_data: 'numerology_map' 
                },
              ],
              [
                { 
                  text: 'üé≤ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞—Å–∫–ª–∞–¥', 
                  callback_data: 'numerology_spread' 
                },
              ],
              [
                { 
                  text: 'ü™û –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç', 
                  callback_data: 'numerology_portrait' 
                },
              ],
              [
                { 
                  text: 'üåÄ –ú–∞—Ç—Ä–∏—Ü–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞', 
                  callback_data: 'numerology_pythagoras' 
                },
              ],
              [
                { text: 'üîô –ù–∞–∑–∞–¥', 
                  callback_data: 'BACK_MAIN_CHOICE' },
              ],
            ],
          },
        }
      );
    }

    if (userState[chatId] === 'gpt') {
      let endpoint;
      switch (data) {
        case 'GPT-3.5 Turbo':
          endpoint = '/api/openai/model3.5';
          break;
        case 'GPT-4o':
          endpoint = '/api/openai/model4';
          break;
        case 'GPT-4o-mini':
          endpoint = '/api/openai/model_gpt-4o-mini';
          break;
        case 'GPT-o1-mini':
          endpoint = '/api/openaiO1/model_o1-mini-2024-09-12';
          break;
        default:
          return bot.answerCallbackQuery(callbackQuery.id, {
            text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å.',
          });
      }

      userModels[chatId] = { modelName: data, endpoint };
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: `–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å ${data}.`,
      });

      return bot.sendMessage(
        chatId,
        `–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –º–æ–¥–µ–ª—å ${data}.`
      );
    }

    if (userState[chatId] === 'numerologist') {
      let choiceText = '';
      let resText = '';

      switch (data) {
        case 'numerology_map':
          choiceText = '–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ ‚Äî –ø–æ–ª–Ω—ã–π –∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏, –≤–∫–ª—é—á–∞—è —á–∏—Å–ª–∞ –ñ–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ü—É—Ç–∏, –°—É–¥—å–±—ã, –õ–∏—á–Ω–æ—Å—Ç–∏, –°–µ—Ä–¥—Ü–∞ –∏ –¥—Ä.';
          resText = '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –í —Ñ–æ—Ä–º–∞—Ç–µ: *–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ* –∏ –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è.';
          break;
        case 'numerology_spread':
          choiceText = '–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞—Å–∫–ª–∞–¥ ‚Äî –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞ (—Ñ–∏–Ω–∞–Ω—Å—ã, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –∑–¥–æ—Ä–æ–≤—å–µ, –∫–∞—Ä—å–µ—Ä–∞).';
          resText = '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –í —Ñ–æ—Ä–º–∞—Ç–µ: *–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ* –∏ –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É/–≤–æ–ø—Ä–æ—Å.';
          break;
        case 'numerology_portrait':
          choiceText = '–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç ‚Äî –∫—Ä–∞—Ç–∫–∏–π –∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏.';
          resText = '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –í —Ñ–æ—Ä–º–∞—Ç–µ: *–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ* –∏ –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è.';
          break;
        case 'numerology_pythagoras':
          choiceText = '–ú–∞—Ç—Ä–∏—Ü–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞ (–ø—Å–∏—Ö–æ–º–∞—Ç—Ä–∏—Ü–∞) ‚Äì —ç—Ç–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è';
          resText = '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –í —Ñ–æ—Ä–º–∞—Ç–µ: *–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ* –∏ –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è.';
          break;
        default:
          return bot.answerCallbackQuery(callbackQuery.id, {
            text: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä.',
          });
      }

      userNumerologyChoices[chatId] = choiceText;
      userNumerologyRes[chatId] = resText;

      await bot.answerCallbackQuery(callbackQuery.id, {
        text: `‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: ${choiceText}`,
      });

      return bot.sendMessage(
        chatId,
        `üîÆ *${choiceText}*\n\n${resText}`,
        { parse_mode: 'Markdown' }
      );
    }
  });

 
  bot.on('message', async (msg) => {
    const chatId = String(msg.chat.id);
    const userMessage = msg.text;

    if (!userMessage || userMessage.startsWith('/')) {
      return;
    }

    if (userState[chatId] === 'numerologist') {
      try {
        const response = await axios.post('/api/openai/numerologist', {
          chatId,
          type: userNumerologyChoices[chatId], 
          userMessage,
        });

        const botResponse = response.data.reply || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞...';

        if (botResponse.length <= 4000) {
          const formattedResponse = botResponse.includes('```')
            ? botResponse
            : `\`\`\`\n${botResponse}\n\`\`\``; // –û–±—Ä–∞–º–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–ª–æ–∫ –∫–æ–¥–∞, –µ—Å–ª–∏ –∫–æ–¥ –Ω–µ –≤—ã–¥–µ–ª–µ–Ω
        
          bot.sendMessage(chatId, `ü§ñ *–û—Ç–≤–µ—Ç:* \n${formattedResponse}`, {
            parse_mode: 'MarkdownV2',
          });
        } else {
          const buffer = Buffer.from(botResponse, 'utf8');
          await bot.sendDocument(
            chatId,
            buffer,
            {
              caption: '–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –ø–æ—ç—Ç–æ–º—É –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏:',
              parse_mode: 'Markdown',
            },
            { filename: 'reply.txt', contentType: 'text/plain' }
          );
        }
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è):', error);
        return bot.sendMessage(
          chatId,
          '‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –∑–∞–ø—Ä–æ—Å–µ, –≤–æ–∑–º–æ–∂–Ω–æ –∏—Å—Ç–µ–∫–ª–∏ –∑–∞–ø—Ä–æ—Å—ã.*',
          { parse_mode: 'Markdown' }
        );
      } finally {
        userState[chatId] = null;
        delete userNumerologyChoices[chatId];
        delete userNumerologyRes[chatId];
      }
      return 
    }

    const userModel = userModels[chatId] || DEFAULT_MODEL;
    if (!userModel) {
    return; 
  }
    let processingMessageId;
    try {
      const processingMessage = await bot.sendMessage(
        chatId,
        '‚è≥ *–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...*',
        { parse_mode: 'Markdown' }
      );
      processingMessageId = processingMessage.message_id;
    } catch (err) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', err);
    }

    try {
      const response = await axios.post(userModel.endpoint, {
        chatId,
        userMessage,
        modelName: userModel.modelName,
      });

      const botResponse = response.data.reply;

      if (processingMessageId) {
        try {
          await bot.deleteMessage(chatId, processingMessageId);
        } catch (err) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', err.message);
        }
      }

      if (botResponse.length <= 4000) {
        bot.sendMessage(chatId, `ü§ñ *–û—Ç–≤–µ—Ç:* \n${botResponse}`, {
          parse_mode: 'Markdown',
        });
      } else {
        const buffer = Buffer.from(botResponse, 'utf8');
        await bot.sendDocument(
          chatId,
          buffer,
          {
            caption: '–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –ø–æ—ç—Ç–æ–º—É –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏:',
            parse_mode: 'Markdown',
          },
          { filename: 'reply.txt', contentType: 'text/plain' }
        );
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ GPT-—Å–æ–æ–±—â–µ–Ω–∏—è:', error);

      if (processingMessageId) {
        try {
          await bot.deleteMessage(chatId, processingMessageId);
        } catch (delErr) {
          console.warn('‚ö†Ô∏è (catch) –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', delErr.message);
        }
      }
      const errorMessage =
        error.response?.data?.error || '‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.*';
      bot.sendMessage(chatId, errorMessage, { parse_mode: 'Markdown' });
    }
  });
};
*/
