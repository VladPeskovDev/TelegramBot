const axios = require('../utils/axiosInstance');
const { userState, userNumerologyChoices, userNumerologyRes } = require('./userState');

module.exports = (bot) => {
  bot.onText(/\/numerologist/, (msg) => {
    const chatId = String(msg.chat.id);
    userState[chatId] = 'numerologist';

    const options = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìä –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞', callback_data: 'numerology_map' }],
          [{ text: 'üîç –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞—Å–∫–ª–∞–¥', callback_data: 'numerology_spread' }],
          [{ text: 'üß† –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç', callback_data: 'numerology_portrait' }],
          [{ text: 'üåÄ –ú–∞—Ç—Ä–∏—Ü–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞', callback_data: 'numerology_pythagoras' }],
        ],
      },
    };

    bot.sendMessage(
      chatId,
      'üîÆ *–í—ã –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –º–æ–¥–µ–ª—å "–õ–∏—á–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥".* \n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç–∏–ø–æ–≤ —Ä–∞–∑–±–æ—Ä–∞:',
      { parse_mode: 'Markdown', ...options }
    );
  });

  bot.on('callback_query', async (callbackQuery) => {
    const chatId = String(callbackQuery.message.chat.id);
    
    if (userState[chatId] !== 'numerologist') return;
    const choice = callbackQuery.data;

    switch (choice) {
        case 'numerology_map':
          userNumerologyChoices[chatId] = '–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ ‚Äî –ø–æ–ª–Ω—ã–π –∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏, –≤–∫–ª—é—á–∞—é—â–∏–π —á–∏—Å–ª–∞ –ñ–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ü—É—Ç–∏, –°—É–¥—å–±—ã, –õ–∏—á–Ω–æ—Å—Ç–∏, –°–µ—Ä–¥—Ü–∞ –∏ –¥—Ä.';
          userNumerologyRes[chatId] = '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –í —Ñ–æ—Ä–º–∞—Ç–µ –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ –∏ –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è.';
          break;
        case 'numerology_spread':
          userNumerologyChoices[chatId] = '–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞—Å–∫–ª–∞–¥ ‚Äî –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞ (—Ñ–∏–Ω–∞–Ω—Å—ã, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –∑–¥–æ—Ä–æ–≤—å–µ, –∫–∞—Ä—å–µ—Ä–∞).';
          userNumerologyRes[chatId] = '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –í —Ñ–æ—Ä–º–∞—Ç–µ –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ –∏ –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤—å—Ç–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞ (—Ñ–∏–Ω–∞–Ω—Å—ã, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –∑–¥–æ—Ä–æ–≤—å–µ, –∫–∞—Ä—å–µ—Ä–∞).';
          break;
        case 'numerology_portrait':
          userNumerologyChoices[chatId] = '–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç ‚Äî –∫—Ä–∞—Ç–∫–∏–π –∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏';
          userNumerologyRes[chatId] = '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –í —Ñ–æ—Ä–º–∞—Ç–µ –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ –∏ –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è.';
          break;
        case 'numerology_pythagoras':
          userNumerologyChoices[chatId] = '–ú–∞—Ç—Ä–∏—Ü–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞ ‚Äî —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–µ –ü–∏—Ñ–∞–≥–æ—Ä–∞, —Å—Ç—Ä–æ–∏—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è (–±–µ–∑ –∏–º–µ–Ω–∏)';
          userNumerologyRes[chatId] = '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –í —Ñ–æ—Ä–º–∞—Ç–µ –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ –∏ –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è.';
          break;
        default:
          bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä.' });
          return;
      }
  
      bot.answerCallbackQuery(callbackQuery.id, { text: `‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: ${userNumerologyChoices[chatId]}` });
      bot.sendMessage(
        chatId,
        `üîÆ *${userNumerologyChoices[chatId]}*\n\n${userNumerologyRes[chatId]}`,
        { parse_mode: 'Markdown' }
      );
    });

  bot.on('message', async (msg) => {
    const chatId = String(msg.chat.id);

    if (!msg.text || msg.text.startsWith('/')) {
    return; 
  }

    if (userState[chatId] !== 'numerologist') return;

    const userMessage = msg.text;

    try {
      const response = await axios.post('/api/openai/numerologist', {
        chatId,
        type: userNumerologyChoices[chatId],
        userMessage,
      });

      bot.sendMessage(chatId, `üîÆ *–û—Ç–≤–µ—Ç:* \n${response.data.reply}`, { parse_mode: 'Markdown' });

      delete userNumerologyChoices[chatId];
      delete userState[chatId];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      bot.sendMessage(chatId, '‚ùå *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.*', { parse_mode: 'Markdown' });
    }
  });
};











/* const axios = require('../utils/axiosInstance');

// –•—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã
const userModels = {};
const userNumerologyChoices = {};

module.exports = (bot) => {
  
  bot.onText(/\/numerologist/, (msg) => {
    const chatId = String(msg.chat.id);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å "–õ–∏—á–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥"
    userModels[chatId] = {
      modelName: 'Personal Numerologist',
      endpoint: '/api/openai/numerologist',
    };

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞–∑–±–æ—Ä–∞
    const options = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìä –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞', callback_data: 'numerology_map' }],
          [{ text: 'üîç –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞—Å–∫–ª–∞–¥', callback_data: 'numerology_spread' }],
          [{ text: 'üß† –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç', callback_data: 'numerology_portrait' }],
          [{ text: 'üåÄ –ú–∞—Ç—Ä–∏—Ü–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞', callback_data: 'numerology_pythagoras' }],
        ],
      },
    };

    bot.sendMessage(
      chatId,
      'üîÆ *–í—ã –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –º–æ–¥–µ–ª—å "–õ–∏—á–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥".* \n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç–∏–ø–æ–≤ —Ä–∞–∑–±–æ—Ä–∞:',
      { parse_mode: 'Markdown', ...options }
    );
  });

  
  bot.on('callback_query', async (callbackQuery) => {
    const chatId = String(callbackQuery.message.chat.id);
    const choice = callbackQuery.data;

    switch (choice) {
      case 'numerology_map':
        userNumerologyChoices[chatId] = '–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ ‚Äî –ø–æ–ª–Ω—ã–π –∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏, –≤–∫–ª—é—á–∞—é—â–∏–π —á–∏—Å–ª–∞ –ñ–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ü—É—Ç–∏, –°—É–¥—å–±—ã, –õ–∏—á–Ω–æ—Å—Ç–∏, –°–µ—Ä–¥—Ü–∞ –∏ –¥—Ä.';
        break;
      case 'numerology_spread':
        userNumerologyChoices[chatId] = '–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞—Å–∫–ª–∞–¥ ‚Äî –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞ (—Ñ–∏–Ω–∞–Ω—Å—ã, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –∑–¥–æ—Ä–æ–≤—å–µ, –∫–∞—Ä—å–µ—Ä–∞).';
        break;
      case 'numerology_portrait':
        userNumerologyChoices[chatId] = '–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç ‚Äî –∫—Ä–∞—Ç–∫–∏–π –∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏';
        break;
      case 'numerology_pythagoras':
        userNumerologyChoices[chatId] = '–ú–∞—Ç—Ä–∏—Ü–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞ ‚Äî —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–µ –ü–∏—Ñ–∞–≥–æ—Ä–∞, —Å—Ç—Ä–æ–∏—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è (–±–µ–∑ –∏–º–µ–Ω–∏)';
        break;
      default:
        bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä.' });
        return;
    }

    bot.answerCallbackQuery(callbackQuery.id, { text: `‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: ${userNumerologyChoices[chatId]}` });
    bot.sendMessage(
      chatId,
      `üîÆ *${userNumerologyChoices[chatId]}*\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –í —Ñ–æ—Ä–º–∞—Ç–µ –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ –∏ –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è.`,
      { parse_mode: 'Markdown' }
    );
  });

 
  bot.on('message', async (msg) => {
    const chatId = String(msg.chat.id);
    const userMessage = msg.text;

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!userMessage || userMessage.startsWith('/')) {
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —Ç–∏–ø —Ä–∞–∑–±–æ—Ä–∞
    const numerologyChoice = userNumerologyChoices[chatId];
    if (!numerologyChoice) {
      bot.sendMessage(
        chatId,
        '‚ö†Ô∏è *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞.*\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /numerologist –¥–ª—è –≤—ã–±–æ—Ä–∞.',
        { parse_mode: 'Markdown' }
      );
      return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userModel = userModels[chatId] || {
      modelName: 'GPT-3.5',
      endpoint: '/api/openai/model3.5',
    };

    let processingMessageId;

    try {
      // ‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const processingMessage = await bot.sendMessage(
        chatId,
        '‚è≥ *–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...*',
        { parse_mode: 'Markdown' }
      );

      processingMessageId = processingMessage.message_id;

      // üì§ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç —É API OpenAI
      const response = await axios.post(userModel.endpoint, {
        chatId,
        userMessage: `${numerologyChoice}\n–í–æ–ø—Ä–æ—Å: ${userMessage}`,
        modelName: userModel.modelName,
      });

      const botResponse = response.data.reply;

      // ‚úÖ –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      try {
        await bot.deleteMessage(chatId, processingMessageId);
      } catch (err) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', err.message);
      }

      // üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
      if (botResponse.length <= 4000) {
        bot.sendMessage(
          chatId,
          `üîÆ *–û—Ç–≤–µ—Ç –Ω—É–º–µ—Ä–æ–ª–æ–≥–∞:* \n${botResponse}`,
          { parse_mode: 'Markdown' }
        );
      } else {
        // –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≤–∏–¥–µ txt-—Ñ–∞–π–ª–∞
        const buffer = Buffer.from(botResponse, 'utf8');

        await bot.sendDocument(
          chatId,
          buffer,
          { caption: 'üîÆ –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –ø–æ—ç—Ç–æ–º—É –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏:' },
          { filename: 'numerologist_reply.txt', contentType: 'text/plain' }
        );
      }

      // –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
      delete userNumerologyChoices[chatId];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);

      // ‚ùó –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      if (processingMessageId) {
        try {
          await bot.deleteMessage(chatId, processingMessageId);
        } catch (delErr) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', delErr.message);
        }
      }

      const errorMessage =
        error.response?.data?.error || '‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.*';

      bot.sendMessage(chatId, errorMessage, { parse_mode: 'Markdown' });
    }
  });
};
*/