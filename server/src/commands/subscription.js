const axios = require('../utils/axiosInstance');
const { User } = require('../../db/models'); 

const subscriptionDetails = {
  subscription_standart_plan: {
    name: 'Standart Plan',
    price: '199‚ÇΩ',
    details: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª—é–±—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ GPT, –≤ —Ç–æ–º —á–∏—Å–ª–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª—å—é GPT-o1 üöÄ –∏ GPT-4o',
    modelLimits: {
      'GPT-o3-mini': 25,
      'GPT-4o-mini': 70,
      'GPT-4o': 15,
      'GPT-o1': 20,
      'Numerolog': 2,
      'GPT-o1-image': 5,
    },
  },
  subscription_standart_plus_plan: {
    name: 'Standart Plus Plan',
    price: '299‚ÇΩ',
    details: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª—é–±—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ GPT, –≤ —Ç–æ–º —á–∏—Å–ª–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª—å—é GPT-o1-mini-NEW üöÄ',
    modelLimits: {
      'GPT-o3-mini': 35,
      'GPT-4o-mini': 100,
      'GPT-4o': 30,
      'GPT-o1': 30,
      'Numerolog': 2,
      'GPT-o1-image': 10,
    },
  },
  subscription_premium_plan: {
    name: 'Premium Plan',
    price: '999‚ÇΩ',
    details: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª—é–±—ã–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ GPT –≤ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ, –≤ —Ç–æ–º —á–∏—Å–ª–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª—å—é GPT-o1-mini-NEW üöÄ',
    modelLimits: {
      'GPT-o3-mini': 100,
      'GPT-4o-mini': 250,
      'GPT-4o': 50,
      'GPT-o1': 50,
      'Numerolog': 5,
      'GPT-o1-image': 25,
    },
  },
  subscription_numerolog_standart_plan: {
    name: 'Numerolog Standart Plan',
    price: '99‚ÇΩ',
    details: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–¥–µ–ª—è–º–∏ GPT, –∞ —Ç–∞–∫–∂–µ –ª–∏—á–Ω—ã–º GPT-–Ω—É–º–µ—Ä–æ–ª–æ–≥–æ–º üöÄ',
    modelLimits: {
      'GPT-o3-mini': 5,
      'GPT-4o-mini': 25,
      'GPT-4o': 0,
      'GPT-o1': 5,
      'Numerolog': 15,
      'GPT-o1-image': 0,
    },
  },
  subscription_numerolog_premium_plan: {
    name: 'Numerolog Premium Plan',
    price: '199‚ÇΩ',
    details: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª—é–±—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ GPT, –∞ —Ç–∞–∫–∂–µ –ª–∏—á–Ω—ã–º GPT-–Ω—É–º–µ—Ä–æ–ª–æ–≥–æ–º üöÄ',
    modelLimits: {
      'GPT-o3-mini': 15,
      'GPT-4o-mini': 50,
      'GPT-4o': 0,
      'GPT-o1': 0,
      'Numerolog': 50,
      'GPT-o1-image': 0,
    },
  },
};

// –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ callback_data —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ ID –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –ë–î
const subscriptionMap = {
  'subscription_standart_plan': 2,
  'subscription_standart_plus_plan': 3,
  'subscription_premium_plan': 4,
  'subscription_numerolog_standart_plan': 5,
  'subscription_numerolog_premium_plan': 6,
};

module.exports = (bot) => {
  // –ö–æ–º–∞–Ω–¥–∞ /subscription
  bot.onText(/\/subscription/, (msg) => {
    const chatId = String(msg.chat.id);
    const options = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üíµ Standart Plan - 199‚ÇΩ', callback_data: 'subscription_standart_plan' }],
          [{ text: 'üíµ Standart Plus Plan - 299‚ÇΩ', callback_data: 'subscription_standart_plus_plan' }],
          [{ text: 'üíµ Premium Plan - 999‚ÇΩ', callback_data: 'subscription_premium_plan' }],
          [{ text: 'üíµ –ù—É–º–µ—Ä–æ–ª–æ–≥ Standart Plan - 99‚ÇΩ', callback_data: 'subscription_numerolog_standart_plan' }],
          [{ text: 'üíµ –ù—É–º–µ—Ä–æ–ª–æ–≥ Premium Plan - 199‚ÇΩ', callback_data: 'subscription_numerolog_premium_plan' }]
        ],
      },
    };
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:', options);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback (–∫–Ω–æ–ø–æ–∫) –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
  bot.on('callback_query', async (callbackQuery) => {
    const chatId = String(callbackQuery.message.chat.id);
    const callbackData = callbackQuery.data;

    // –®–∞–≥ 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    if (callbackData === 'subscription_back') {
      const options = {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üíµ Standart Plan - 199‚ÇΩ', callback_data: 'subscription_standart_plan' }],
            [{ text: 'üíµ Standart Plus Plan - 299‚ÇΩ', callback_data: 'subscription_standart_plus_plan' }],
            [{ text: 'üíµ Premium Plan - 999‚ÇΩ', callback_data: 'subscription_premium_plan' }],
            [{ text: 'üíµ –ù—É–º–µ—Ä–æ–ª–æ–≥ Standart Plan - 99‚ÇΩ', callback_data: 'subscription_numerolog_standart_plan' }],
            [{ text: 'üíµ –ù—É–º–µ—Ä–æ–ª–æ–≥ Premium Plan - 199‚ÇΩ', callback_data: 'subscription_numerolog_premium_plan' }]
          ],
        },
      };
      bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:', {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        reply_markup: options.reply_markup,
      });
      return;
    }

    // –®–∞–≥ 2: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞–∫—É—é-—Ç–æ –ø–æ–¥–ø–∏—Å–∫—É
    if (callbackData.startsWith('subscription_')) {
      const subscription = subscriptionDetails[callbackData];
      if (!subscription) {
        bot.answerCallbackQuery(callbackQuery.id, { text: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.' });
        return;
      }

      const details = `
–í—ã –≤—ã–±—Ä–∞–ª–∏: *${subscription.name}*\n
ü™ô *–¶–µ–Ω–∞:* ${subscription.price}\n
üìÑ *–î–µ—Ç–∞–ª–∏:* ${subscription.details}\n
üìä *–õ–∏–º–∏—Ç—ã –ø–æ –º–æ–¥–µ–ª—è–º:*\n${Object.entries(subscription.modelLimits)
            .map(([model, limit]) => `- ${model}: ${limit}`)
            .join('\n')}
      `;

      const options = {
        reply_markup: {
          inline_keyboard: [
            [{ text: `–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ${subscription.name}`, callback_data: `purchase_${callbackData}` }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'subscription_back' }],
          ],
        },
      };

      bot.editMessageText(details, {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        parse_mode: 'Markdown',
        reply_markup: options.reply_markup,
      });
    }

    // –®–∞–≥ 3: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ‚Ä¶"
    if (callbackData.startsWith('purchase_')) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –≤–∏–¥–∞ "subscription_standart_plan"
        const planKey = callbackData.replace('purchase_', '');
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º subscriptionId –∏–∑ –∫–∞—Ä—Ç—ã (subscriptionMap)
        const subscriptionId = subscriptionMap[planKey];
        if (!subscriptionId) {
          await bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏.');
          return;
        }

        // –ò—â–µ–º/—Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ telegram_id = chatId
        // (–∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ Users)
        const [userInstance] = await User.findOrCreate({
          where: { telegram_id: chatId },
          defaults: {
            telegram_id: chatId,
            username: callbackQuery.from.username || '',
            first_name: callbackQuery.from.first_name || null,
            last_name: callbackQuery.from.last_name || null,
          }
        });

        // –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞—à –±—ç–∫–µ–Ω–¥ –Ω–∞ /create-payment
        const { data } = await axios.post('/api/robokassa/create-payment', {
          userId: userInstance.id,    // —ç—Ç–æ id –∏–∑ –ë–î, –∞ –Ω–µ chatId
          subscriptionId
        });

        // data.payUrl - —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É Robokassa
        if (data.payUrl) {
          await bot.sendMessage(chatId,
            '–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É:',
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: '–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                      url: data.payUrl,
                    },
                  ],
                ],
              },
            });
        } else {
          await bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É.');
        }

      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error.message);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }
  });
};

















/* const subscriptionDetails = {
  subscription_standart_plan: { // –ò–∑–º–µ–Ω—ë–Ω –∫–ª—é—á
    name: 'Standart Plan',
    price: '149‚ÇΩ',
    details: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–∞–∫–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏ GPT, –∫–∞–∫ GPT-3.5 Turbo –∏ GPT-4o-mini üöÄ',
    modelLimits: {
      'GPT-3.5 Turbo': 150,
      'GPT-4o-mini': 50,
      'GPT-4o': 15,
      'GPT-o1-mini-NEW': 25, //149 —Ä—É–±–ª–µ–π
      'Numerolog': 2,
    },
  },
  subscription_standart_plus_plan: {
    name: 'Standart Plus Plan',
    price: '299‚ÇΩ',
    details: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª—é–±—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ GPT, –≤ —Ç–æ–º —á–∏—Å–ª–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª—å—é GPT-o1-mini-NEW —Å –µ—â–µ –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤ üöÄ',
    modelLimits: {
      'GPT-3.5 Turbo': 300,
      'GPT-4o-mini': 100,
      'GPT-4o': 30,
      'GPT-o1-mini-NEW': 50, //299 —Ä—É–±–ª–µ–π
      'Numerolog': 2,
    },
  },
  subscription_premium_plan: {
    name: 'Premium Plan',
    price: '899‚ÇΩ',
    details: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª—é–±—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ GPT, –≤ —Ç–æ–º —á–∏—Å–ª–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª—å—é GPT-o1-mini-NEW —Å –µ—â–µ –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤ üöÄ',
    modelLimits: {
      'GPT-3.5 Turbo': 1000,
      'GPT-4o-mini': 250,
      'GPT-4o': 50,
      'GPT-o1-mini-NEW': 75,
      'Numerolog': 5,   //899 —Ä—É–±–ª–µ–π
    },
  },
  subscription_numerolog_standart_plan: { 
    name: 'Numerolog Standart Plan',
    price: '99‚ÇΩ',
    details: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–¥–µ–ª—è–º–∏ GPT, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ª–∏—á–Ω–æ–≥–æ GPT –Ω—É–º–µ—Ä–æ–ª–æ–≥–∞ üöÄ',
    modelLimits: {
      'GPT-3.5 Turbo': 75,
      'GPT-4o-mini': 25,
      'GPT-4o': 0,
      'GPT-o1-mini-NEW': 0,
      'Numerolog': 20,   //99 —Ä—É–±–ª–µ–π 
    },
  },
  subscription_numerolog_premium_plan: { 
    name: 'Numerolog Premium Plan',
    price: '199‚ÇΩ',
    details: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª—é–±—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ GPT, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ª–∏—á–Ω–æ–≥–æ GPT –Ω—É–º–µ—Ä–æ–ª–æ–≥–∞ üöÄ',
    modelLimits: {
      'GPT-3.5 Turbo': 100,
      'GPT-4o-mini': 50,
      'GPT-4o': 0,
      'GPT-o1-mini-NEW': 0,
      'Numerolog': 50,  //199 —Ä—É–±–ª–µ–π 
    },
  },
};

module.exports = (bot) => {
  bot.onText(/\/subscription/, (msg) => {
    const chatId = String(msg.chat.id);
    const options = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üíµ Standart Plan - 149‚ÇΩ', callback_data: 'subscription_standart_plan' }],
          [{ text: 'üíµ Standart Plus Plan - 299‚ÇΩ', callback_data: 'subscription_standart_plus_plan' }],
          [{ text: 'üíµ Premium Plan - 899‚ÇΩ', callback_data: 'subscription_premium_plan' }],
          [{ text: 'üíµ –ù—É–º–µ—Ä–æ–ª–æ–≥ Standart Plan - 99‚ÇΩ', callback_data: 'subscription_numerolog_standart_plan' }],
          [{ text: 'üíµ –ù—É–º–µ—Ä–æ–ª–æ–≥ Premium Plan - 199‚ÇΩ', callback_data: 'subscription_numerolog_premium_plan' }]
        ],
      },
    };
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:', options);
  });

  bot.on('callback_query', (callbackQuery) => {
    const chatId = String(callbackQuery.message.chat.id);
    const callbackData = callbackQuery.data;

    if (callbackData.startsWith('subscription_')) {
      if (callbackData === 'subscription_back') {
        const options = {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üíµ Standart Plan - 149‚ÇΩ', callback_data: 'subscription_standart_plan' }],
              [{ text: 'üíµ Standart Plus Plan - 299‚ÇΩ', callback_data: 'subscription_standart_plus_plan' }],
              [{ text: 'üíµ Premium Plan - 899‚ÇΩ', callback_data: 'subscription_premium_plan' }],
              [{ text: 'üíµ –ù—É–º–µ—Ä–æ–ª–æ–≥ Standart Plan - 99‚ÇΩ', callback_data: 'subscription_numerolog_standart_plan' }],
              [{ text: 'üíµ –ù—É–º–µ—Ä–æ–ª–æ–≥ Premium Plan - 199‚ÇΩ', callback_data: 'subscription_numerolog_premium_plan' }]
            ],
          },
        };

        bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:', {
          chat_id: chatId,
          message_id: callbackQuery.message.message_id,
          reply_markup: options.reply_markup,
        });
        return;
      }

      const subscription = subscriptionDetails[callbackData];
      if (!subscription) {
        bot.answerCallbackQuery(callbackQuery.id, { text: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.' });
        return;
      }

      const details = `
–í—ã –≤—ã–±—Ä–∞–ª–∏: *${subscription.name}*\n
ü™ô *–¶–µ–Ω–∞:* ${subscription.price}\n
üìÑ *–î–µ—Ç–∞–ª–∏:* ${subscription.details}\n
üìä *–õ–∏–º–∏—Ç—ã –ø–æ –º–æ–¥–µ–ª—è–º:*\n${Object.entries(subscription.modelLimits)
          .map(([model, limit]) => `- ${model}: ${limit}`)
          .join('\n')}
      `;

      const options = {
        reply_markup: {
          inline_keyboard: [
            [{ text: `–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ${subscription.name}`, callback_data: `purchase_${callbackData}` }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'subscription_back' }],
          ],
        },
      };

      bot.editMessageText(details, {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        parse_mode: 'Markdown',
        reply_markup: options.reply_markup,
      });
    }
  });
};
*/