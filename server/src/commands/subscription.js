const subscriptionDetails = {
  subscription_standart_plan: { // –ò–∑–º–µ–Ω—ë–Ω –∫–ª—é—á
    name: 'Standart Plan',
    price: '5$',
    details: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–∞–∫–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏ GPT, –∫–∞–∫ GPT-3.5 Turbo –∏ GPT-4o-mini üöÄ',
    modelLimits: {
      'GPT-3.5 Turbo': 150,
      'GPT-4o-mini': 50,
      'GPT-4o': 15,
      'GPT-o1-mini-NEW': 25,
    },
  },
  subscription_standard_plus_plan: {
    name: 'Standard Plus Plan',
    price: '10$',
    details: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª—é–±—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ GPT, –≤ —Ç–æ–º —á–∏—Å–ª–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª—å—é GPT-o1-mini-NEW —Å –µ—â–µ –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤ üöÄ',
    modelLimits: {
      'GPT-3.5 Turbo': 300,
      'GPT-4o-mini': 100,
      'GPT-4o': 30,
      'GPT-o1-mini-NEW': 50,
    },
  },
  subscription_premium_plan: {
    name: 'Premium Plan',
    price: '25$',
    details: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª—é–±—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ GPT, –≤ —Ç–æ–º —á–∏—Å–ª–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª—å—é GPT-o1-mini-NEW —Å –µ—â–µ –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤ üöÄ',
    modelLimits: {
      'GPT-3.5 Turbo': 1000,
      'GPT-4o-mini': 250,
      'GPT-4o': 50,
      'GPT-o1-mini-NEW': 75,
    },
  },
  subscription_numerolog_standart_plan: { 
    name: 'Numerolog Standart Plan',
    price: '5$',
    details: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–¥–µ–ª—è–º–∏ GPT, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ª–∏—á–Ω–æ–≥–æ GPT –Ω—É–º–µ—Ä–æ–ª–æ–≥–∞ üöÄ',
    modelLimits: {
      'GPT-3.5 Turbo': 75,
      'GPT-4o-mini': 25,
      'GPT-4o': 0,
      'GPT-o1-mini-NEW': 0,
      'Numerolog': 25,
    },
  },
  subscription_numerolog_premium_plan: { 
    name: 'Numerolog Premium Plan',
    price: '5$',
    details: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª—é–±—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ GPT, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ª–∏—á–Ω–æ–≥–æ GPT –Ω—É–º–µ—Ä–æ–ª–æ–≥–∞ üöÄ',
    modelLimits: {
      'GPT-3.5 Turbo': 100,
      'GPT-4o-mini': 50,
      'GPT-4o': 0,
      'GPT-o1-mini-NEW': 0,
      'Numerolog': 50,
    },
  },
};

module.exports = (bot) => {
  bot.onText(/\/subscription/, (msg) => {
    const chatId = String(msg.chat.id);
    const options = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üíµ Standart Plan - 5$', callback_data: 'subscription_standart_plan' }],
          [{ text: 'üíµ Standard Plus Plan - 10$', callback_data: 'subscription_standard_plus_plan' }],
          [{ text: 'üíµ Premium Plan - 25$ ', callback_data: 'subscription_premium_plan' }],
          [{ text: 'üíµ –ù—É–º–µ—Ä–æ–ª–æ–≥ Standart Plan - 5$', callback_data: 'subscription_numerolog_standart_plan' }],
          [{ text: 'üíµ –ù—É–º–µ—Ä–æ–ª–æ–≥ Premium Plan - 5$', callback_data: 'subscription_numerolog_premium_plan' }]
        ],
      },
    };
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:', options);
  });

  bot.on('callback_query', (callbackQuery) => {
    const chatId = String(callbackQuery.message.chat.id);
    const callbackData = callbackQuery.data;

    if (callbackData.startsWith('subscription_')) {
      if (callbackData === 'subscription_back') {
        const options = {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üíµ Standart Plan - 5$', callback_data: 'subscription_standart_plan' }],
              [{ text: 'üíµ Standard Plus Plan - 10$', callback_data: 'subscription_standard_plus_plan' }],
              [{ text: 'üíµ Premium Plan - 25$ ', callback_data: 'subscription_premium_plan' }],
              [{ text: 'üíµ –ù—É–º–µ—Ä–æ–ª–æ–≥ Standart Plan - 5$', callback_data: 'subscription_numerolog_standart_plan' }],
              [{ text: 'üíµ –ù—É–º–µ—Ä–æ–ª–æ–≥ Premium Plan - 5$', callback_data: 'subscription_numerolog_premium_plan' }]
            ],
          },
        };

        bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:', {
          chat_id: chatId,
          message_id: callbackQuery.message.message_id,
          reply_markup: options.reply_markup,
        });
        return;
      }

      const subscription = subscriptionDetails[callbackData];
      if (!subscription) {
        bot.answerCallbackQuery(callbackQuery.id, { text: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.' });
        return;
      }

      const details = `
–í—ã –≤—ã–±—Ä–∞–ª–∏: *${subscription.name}*\n
üíµ *–¶–µ–Ω–∞:* ${subscription.price}\n
üìÑ *–î–µ—Ç–∞–ª–∏:* ${subscription.details}\n
üìä *–õ–∏–º–∏—Ç—ã –ø–æ –º–æ–¥–µ–ª—è–º:*\n${Object.entries(subscription.modelLimits)
          .map(([model, limit]) => `- ${model}: ${limit}`)
          .join('\n')}
      `;

      const options = {
        reply_markup: {
          inline_keyboard: [
            [{ text: `–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ${subscription.name}`, callback_data: `purchase_${callbackData}` }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'subscription_back' }],
          ],
        },
      };

      bot.editMessageText(details, {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        parse_mode: 'Markdown',
        reply_markup: options.reply_markup,
      });
    }
  });
};
