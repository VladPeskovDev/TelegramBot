const axios = require('../utils/axiosInstance');
require('dotenv').config();
//const fs = require('fs');

const userModels = {}; // –•—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userImageState = {}; // –°–ª–µ–¥–∏–º –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º (–æ–∂–∏–¥–∞–µ—Ç –ª–∏ –±–æ—Ç —Ñ–æ—Ç–æ)

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
 */
function showImageModelMenu(bot, chatId) {
  const options = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üì∏ –ú–æ–¥–µ–ª—å O1 (–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)', callback_data: 'IMAGE_MODEL_O1' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'BACK_MAIN_CHOICE' }],
      ],
    },
  };
  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', options);
}

module.exports = (bot) => {
  bot.onText(/\/image/, async (msg) => {
    const chatId = String(msg.chat.id);
    userImageState[chatId] = null;

    const options = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üì∏ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å', callback_data: 'CHOOSE_IMAGE_MODEL' }],
        ],
      },
    };

    bot.sendMessage(
      chatId,
      'üì∏ *–≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!* \n\n' +
        '–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ, –∏ –±–æ—Ç —Ä–∞—Å—Å–∫–∞–∂–µ—Ç, —á—Ç–æ –Ω–∞ –Ω—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ.',
      { parse_mode: 'Markdown', ...options }
    );
  });

  bot.on('callback_query', async (callbackQuery) => {
    const chatId = String(callbackQuery.message.chat.id);
    const data = callbackQuery.data;

    if (data === 'CHOOSE_IMAGE_MODEL') {
      return showImageModelMenu(bot, chatId);
    }

    if (data === 'IMAGE_MODEL_O1') {
      userModels[chatId] = 'o1';
      userImageState[chatId] = 'awaiting_image';

      await bot.answerCallbackQuery(callbackQuery.id, { text: '–í—ã –≤—ã–±—Ä–∞–ª–∏ O1. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.' });
      return bot.sendMessage(chatId, 'üì§ *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∏ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ!*', { parse_mode: 'Markdown' });
    }
  });

  bot.on('photo', async (msg) => {
    const chatId = String(msg.chat.id);

    if (userImageState[chatId] !== 'awaiting_image') {
        return;
    }

    userImageState[chatId] = null;

    const fileId = msg.photo[msg.photo.length - 1].file_id;
    console.log(`üì∏ –ü–æ–ª—É—á–µ–Ω fileId: ${fileId}`);

    try {
        const file = await bot.getFile(fileId);
        const botToken = process.env.TELEGRAM_BOT_TOKEN;
        if (!botToken) {
            console.error('‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            return bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞.');
        }

        const fileUrl = `https://api.telegram.org/file/bot${botToken}/${file.file_path}`;
        console.log(`üîó Telegram File URL: ${fileUrl}`);

        // **–°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª**
        const response = await axios({
            method: 'get',
            url: fileUrl,
            responseType: 'arraybuffer'
        });

        const imageBuffer = Buffer.from(response.data, 'binary');

        // **–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Base64**
        const base64Image = `data:image/jpeg;base64,${imageBuffer.toString('base64')}`;
        console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ Base64 (–¥–ª–∏–Ω–∞: ${base64Image.length})`);

        let processingMessageId;
        try {
            const processingMessage = await bot.sendMessage(chatId, '‚è≥ *–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...*', { parse_mode: 'Markdown' });
            processingMessageId = processingMessage.message_id;
        } catch (err) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è:', err);
        }

        console.log(`üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ API —Å Base64`);

        // **–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ API –Ω–∞—à Base64**
        const apiResponse = await axios.post('/api/imagebot/process-image', {
            chatId,
            base64Image,
            userMessage: '–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–º —Ñ–æ—Ç–æ?',
        });

        console.log(`‚úÖ –û—Ç–≤–µ—Ç API:`, apiResponse.data);

        if (processingMessageId) {
            await bot.deleteMessage(chatId, processingMessageId);
        }

        const botResponse = apiResponse.data.reply || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞...';
        bot.sendMessage(chatId, `üì∏ *–û—Ç–≤–µ—Ç:* \n\n${botResponse}`, { parse_mode: 'Markdown' });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ:', error);
        bot.sendMessage(chatId, '‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.*', { parse_mode: 'Markdown' });
    }
});
};
