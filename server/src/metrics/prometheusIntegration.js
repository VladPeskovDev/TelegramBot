const { requestCounter, activeUsersGauge, responseTimeHistogram, totalUsersGauge, dailyUsersGauge,  updateMaxOnline 
} = require('./prometheusMetrics');
const loggerWinston = require('./loggerWinston'); 
const cron = require('node-cron');

// –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const activeUsers = new Map(); 
const dailyUsers = new Set();

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cron-–∑–∞–¥–∞—á—É –Ω–∞ —Å–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cron.schedule('30 00 * * *', () => {
  loggerWinston.info('üïí [CRON JOB] –°–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫: bot_daily_users –∏ bot_total_users');
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å—É—Ç–∫–∏
  dailyUsersGauge.set(0);
  dailyUsers.clear();
  loggerWinston.info('‚úÖ –ú–µ—Ç—Ä–∏–∫–∞ bot_daily_users —Å–±—Ä–æ—à–µ–Ω–∞.');

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å—É—Ç–∫–∏
  totalUsersGauge.set(0);
  loggerWinston.info('‚úÖ –ú–µ—Ç—Ä–∏–∫–∞ bot_total_users —Å–±—Ä–æ—à–µ–Ω–∞.');
});

// –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
setInterval(() => {
  const now = Date.now();
  let usersRemoved = 0;

  activeUsers.forEach((lastActivity, chatId) => {
    if (now - lastActivity > 10000) { // 10 —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      activeUsers.delete(chatId);
      usersRemoved++;
    }
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  activeUsersGauge.set(activeUsers.size);

  // –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (usersRemoved > 0) {
    //loggerWinston.info(`‚ùå ${usersRemoved} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å(-—è/-–µ–π) —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö.`);
  }
}, 10000);

module.exports = (bot) => {
  bot.on('message', async (msg) => {
    const chatId = String(msg.chat.id);
    const startTime = Date.now();

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    activeUsers.set(chatId, startTime);
    activeUsersGauge.set(activeUsers.size); // –û–±–Ω–æ–≤–ª—è–µ–º Gauge

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    //loggerWinston.info(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–ª—ë–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö.`);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞ —Å—É—Ç–∫–∏
    if (!dailyUsers.has(chatId)) {
      dailyUsers.add(chatId);
      dailyUsersGauge.set(dailyUsers.size); // –û–±–Ω–æ–≤–ª—è–µ–º Gauge
      //loggerWinston.info(`üìÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞ —Å—É—Ç–∫–∏: ${chatId}`);
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å—É—Ç–∫–∏
    totalUsersGauge.inc();
    //loggerWinston.info('üìä –û–±—â–∞—è –º–µ—Ç—Ä–∏–∫–∞ bot_total_users —É–≤–µ–ª–∏—á–µ–Ω–∞.');

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–Ω–ª–∞–π–Ω
    updateMaxOnline(activeUsers.size); // –ü–µ—Ä–µ–¥–∞—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    

    try {
      // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      requestCounter.inc({ endpoint: 'message' });
    } finally {
      // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const responseTime = (Date.now() - startTime) / 1000;
      responseTimeHistogram.observe({ endpoint: 'message' }, responseTime);
      //loggerWinston.info(`‚è≥ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${responseTime} —Å–µ–∫.`);
    }
  });

  bot.on('callback_query', async (callbackQuery) => {
    // eslint-disable-next-line no-unused-vars
    const chatId = String(callbackQuery.message.chat.id);
    const startTime = Date.now();

    // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    try {
      requestCounter.inc({ endpoint: 'callback_query' });
      //loggerWinston.info(`üì• Callback –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${chatId}`);
    } finally {
      const responseTime = (Date.now() - startTime) / 1000;
      responseTimeHistogram.observe({ endpoint: 'callback_query' }, responseTime);
      //loggerWinston.info(`‚è≥ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –∑–∞–ø—Ä–æ—Å–∞: ${responseTime} —Å–µ–∫.`);
    }
  });
};









/* const { requestCounter, activeUsersGauge, responseTimeHistogram, totalUsersGauge, dailyUsersGauge, updateMaxOnline } = require('./prometheusMetrics');
const cron = require('node-cron');

// –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const activeUsers = new Set();
const dailyUsers = new Set();

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cron-–∑–∞–¥–∞—á—É –Ω–∞ —Å–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cron.schedule('7 21 * * *', () => {
  console.log('–°–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫: bot_daily_users –∏ bot_total_users');
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å—É—Ç–∫–∏
  dailyUsersGauge.set(0);
  dailyUsers.clear();

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å—É—Ç–∫–∏
  totalUsersGauge.set(0);
});

module.exports = (bot) => {
  bot.on('message', async (msg) => {
    const chatId = String(msg.chat.id);
    const startTime = Date.now();

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    if (!activeUsers.has(chatId)) {
      activeUsers.add(chatId);
      activeUsersGauge.set(activeUsers.size);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞ —Å—É—Ç–∫–∏
    if (!dailyUsers.has(chatId)) {
      dailyUsers.add(chatId);
      dailyUsersGauge.set(dailyUsers.size);
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å—É—Ç–∫–∏
    totalUsersGauge.inc();

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–Ω–ª–∞–π–Ω
    updateMaxOnline(activeUsers.size);

    try {
      // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      requestCounter.inc({ endpoint: 'message' });
    } finally {
      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        activeUsers.delete(chatId);
        activeUsersGauge.set(activeUsers.size);
      }, 10000);

      // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const responseTime = (Date.now() - startTime) / 1000;
      responseTimeHistogram.observe({ endpoint: 'message' }, responseTime);
    }
  });

  bot.on('callback_query', async (callbackQuery) => {
    // eslint-disable-next-line no-unused-vars
    const chatId = String(callbackQuery.message.chat.id);
    const startTime = Date.now();

    // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    try {
      requestCounter.inc({ endpoint: 'callback_query' });
    } finally {
      const responseTime = (Date.now() - startTime) / 1000;
      responseTimeHistogram.observe({ endpoint: 'callback_query' }, responseTime);
    }
  });
};
*/
/* const { requestCounter, activeUsersGauge, responseTimeHistogram,  totalUsersGauge,  dailyUsersGauge, updateMaxOnline } = require('./prometheusMetrics');
const cron = require('node-cron');
const loggerWinston = require('../utils/loggerWinston'); 

// –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const activeUsers = new Set();
const dailyUsers = new Set();

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cron-–∑–∞–¥–∞—á—É –Ω–∞ —Å–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cron.schedule('14 21 * * *', () => {
  loggerWinston.info('üïí [CRON JOB] –°–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫: bot_daily_users –∏ bot_total_users');
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å—É—Ç–∫–∏
  dailyUsersGauge.set(0);
  dailyUsers.clear();
  loggerWinston.info('‚úÖ –ú–µ—Ç—Ä–∏–∫–∞ bot_daily_users —Å–±—Ä–æ—à–µ–Ω–∞.');

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å—É—Ç–∫–∏
  totalUsersGauge.set(0);
  loggerWinston.info('‚úÖ –ú–µ—Ç—Ä–∏–∫–∞ bot_total_users —Å–±—Ä–æ—à–µ–Ω–∞.');
});

module.exports = (bot) => {
  bot.on('message', async (msg) => {
    const chatId = String(msg.chat.id);
    const startTime = Date.now();

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    if (!activeUsers.has(chatId)) {
      activeUsers.add(chatId);
      activeUsersGauge.set(activeUsers.size);
      //loggerWinston.info(`üë§ –î–æ–±–∞–≤–ª–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${chatId}`);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞ —Å—É—Ç–∫–∏
    if (!dailyUsers.has(chatId)) {
      dailyUsers.add(chatId);
      dailyUsersGauge.set(dailyUsers.size);
      //loggerWinston.info(`üìÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞ —Å—É—Ç–∫–∏: ${chatId}`);
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å—É—Ç–∫–∏
    totalUsersGauge.inc();
    //loggerWinston.info('üìä –û–±—â–∞—è –º–µ—Ç—Ä–∏–∫–∞ bot_total_users —É–≤–µ–ª–∏—á–µ–Ω–∞.');

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–Ω–ª–∞–π–Ω
    updateMaxOnline(activeUsers.size);
    loggerWinston.info(`üìà –û–±–Ω–æ–≤–ª–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–Ω–ª–∞–π–Ω: ${activeUsers.size}`);

    try {
      // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      requestCounter.inc({ endpoint: 'message' });
    } finally {
      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        activeUsers.delete(chatId);
        activeUsersGauge.set(activeUsers.size);
        //loggerWinston.info(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} —É–¥–∞–ª—ë–Ω –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö.`);
      }, 10000);

      // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const responseTime = (Date.now() - startTime) / 1000;
      responseTimeHistogram.observe({ endpoint: 'message' }, responseTime);
      //loggerWinston.info(`‚è≥ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${responseTime} —Å–µ–∫.`);
    }
  });

  bot.on('callback_query', async (callbackQuery) => {
    // eslint-disable-next-line no-unused-vars
    const chatId = String(callbackQuery.message.chat.id);
    const startTime = Date.now();

    // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    try {
      requestCounter.inc({ endpoint: 'callback_query' });
      //loggerWinston.info(`üì• Callback –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${chatId}`);
    } finally {
      const responseTime = (Date.now() - startTime) / 1000;
      responseTimeHistogram.observe({ endpoint: 'callback_query' }, responseTime);
      //loggerWinston.info(`‚è≥ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –∑–∞–ø—Ä–æ—Å–∞: ${responseTime} —Å–µ–∫.`);
    }
  });
};
*/