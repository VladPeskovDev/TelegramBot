const express = require('express');
const fs = require('fs');
const path = require('path');
const axios = require('axios');
const FormData = require('form-data');
const {
  User,
  UserSubscription,
  Subscription,
  SubscriptionModelLimit,
  UserModelRequest,
} = require('../../db/models');
const cache = require('../utils/cacheRedis');
const openai = require('../utils/openai');
const userRateLimiter = require('../utils/rateLimitConfig');

const audioBotRouter = express.Router();



audioBotRouter.route('/process-audio').post(userRateLimiter, async (req, res) => {
  console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ.');

  const { chatId, base64Audio } = req.body;

  if (!chatId || !base64Audio) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (chatId, base64Audio).');
    return res.status(400).json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (chatId, base64Audio).' });
  }

  const tempAudioFilePath = path.join(__dirname, '../../uploads/temp_audio.wav');
  const mainKey = `user_${chatId}_audioProcess_model6`;
  const triggerKey = `trigger_${chatId}_audioProcess_model6`;
  const contextKey = `audio_context_${chatId}`;

  try {
    // üîÑ –î–µ–∫–æ–¥–∏—Ä—É–µ–º Base64 –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ WAV-—Ñ–∞–π–ª
    console.log('üì• –î–µ–∫–æ–¥–∏—Ä—É–µ–º Base64 –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª...');
    const audioBuffer = Buffer.from(base64Audio, 'base64');
    fs.writeFileSync(tempAudioFilePath, audioBuffer);

    // üü¢ –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
    let cachedContext = (await cache.getCache(contextKey)) || [];

    // üü¢ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let userCache = await cache.getCache(mainKey);
    if (!userCache) {
      console.log('üì° –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...');
      const user = await User.findOne({ where: { telegram_id: chatId } });
      if (!user) {
        return res.status(403).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –≤ Telegram.' });
      }

      const activeSubscription = await UserSubscription.findOne({
        where: { user_id: user.id },
        include: [{ model: Subscription, as: 'subscription' }],
        order: [['end_date', 'DESC']],
      });

      if (!activeSubscription || new Date(activeSubscription.end_date) < new Date()) {
        return res.status(403).json({ error: '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.' });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–∫–∏
      const subscriptionLimit = await SubscriptionModelLimit.findOne({
        where: { subscription_id: activeSubscription.subscription.id, model_id: 6 },
      });

      if (!subscriptionLimit) {
        return res.status(400).json({ error: '–õ–∏–º–∏—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.' });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
      const userModelRequest = await UserModelRequest.findOne({
        where: { user_id: user.id, model_id: 6 },
      });

      const currentRequestCount = userModelRequest ? userModelRequest.request_count : 0;

      userCache = {
        userId: user.id,
        requestsLimit: subscriptionLimit.requests_limit,
        requestCount: currentRequestCount,
        syncing: false,
        modelId: 6,
      };

      await cache.setCache(mainKey, userCache, 600);
    }

    // üü¢ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
    if (userCache.requestCount >= userCache.requestsLimit) {
      return res.status(403).json({ error: '–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É (/subscription).' });
    }

    // ‚úÖ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
    userCache.requestCount += 1;

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –≤ –ë–î –∫–∞–∂–¥—ã–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤
    if (userCache.requestCount % 5 === 0 && !userCache.syncing) {
      userCache.syncing = true;
      await UserModelRequest.upsert(
        {
          user_id: userCache.userId,
          model_id: userCache.modelId,
          request_count: userCache.requestCount,
        },
        { where: { user_id: userCache.userId, model_id: userCache.modelId } },
      );
      userCache.syncing = false;
    }

    // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
    await cache.setCache(mainKey, userCache, 450);
    await cache.setCache(triggerKey, '1', 448);

    // **–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ Whisper API**
    console.log('üéô –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –≤ Whisper API...');
    const formData = new FormData();
    formData.append('file', fs.createReadStream(tempAudioFilePath));
    formData.append('model', 'whisper-1');
    formData.append('language', 'ru');

    const whisperResponse = await axios.post('https://api.openai.com/v1/audio/transcriptions', formData, {
      headers: {
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
        ...formData.getHeaders(),
      },
    });

    const transcribedText = whisperResponse.data.text.trim();
    console.log('üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', transcribedText);

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    fs.unlinkSync(tempAudioFilePath);

    // üìå **–§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GPT-4o**
    cachedContext.push({
      role: 'user',
      content: [{ type: 'text', text: transcribedText }],
    });

    if (cachedContext.length > 0) {
      cachedContext = cachedContext.slice(-0);
    }

    console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ GPT...');
    const gptResponse = await openai.chat.completions.create({
      model: 'gpt-4o-2024-11-20',
      messages: cachedContext,
      max_tokens: 1300,
      temperature: 0.7,
    });

    const botResponse = gptResponse.choices?.[0]?.message?.content?.trim() || '–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π';

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    cachedContext.push({ role: 'assistant', content: botResponse });
    if (cachedContext.length > 0) {
      cachedContext = cachedContext.slice(-0);
    }

    await cache.setCache(contextKey, cachedContext, 450);

    // üìå **–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram**
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const telegramApiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;

    await axios.post(telegramApiUrl, {
      chat_id: chatId,
      text: `üéô *–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å:*\n\n${botResponse}`,
      parse_mode: 'Markdown',
    });

    res.json({ reply: botResponse });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ:', error.response?.data || error.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
  }
});

module.exports = audioBotRouter;



















/* const express = require('express');
const fs = require('fs');
const path = require('path');
const axios = require('axios');
const FormData = require('form-data'); // –î–æ–±–∞–≤–ª—è–µ–º FormData –¥–ª—è Whisper API
const {
  User,
  UserSubscription,
  Subscription,
  SubscriptionModelLimit,
  UserModelRequest,
} = require('../../db/models');
const cache = require('../utils/cacheRedis');
const openai = require('../utils/openai');

const audioBotRouter = express.Router();

// üìå **ENDPOINT –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ**
audioBotRouter.post('/process-audio', async (req, res) => {
  console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ.');

  const { chatId, base64Audio } = req.body;

  if (!chatId || !base64Audio) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (chatId, base64Audio).');
    return res.status(400).json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (chatId, base64Audio).' });
  }

  // üìå –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π WAV-—Ñ–∞–π–ª
  const tempAudioFilePath = path.join(__dirname, '../../uploads/temp_audio.wav');

  try {
    // üîÑ –î–µ–∫–æ–¥–∏—Ä—É–µ–º Base64 –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    console.log('üì• –î–µ–∫–æ–¥–∏—Ä—É–µ–º Base64 –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª...');
    const audioBuffer = Buffer.from(base64Audio, 'base64');
    fs.writeFileSync(tempAudioFilePath, audioBuffer);

    console.log('üéô –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –≤ Whisper API...');

    // üìå –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è Whisper API
    const formData = new FormData();
    formData.append('file', fs.createReadStream(tempAudioFilePath));
    formData.append('model', 'whisper-1');
    formData.append('language', 'ru');

    // üìå –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Whisper API
    const whisperResponse = await axios.post('https://api.openai.com/v1/audio/transcriptions', formData, {
      headers: {
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
        ...formData.getHeaders(),
      },
    });

    const transcribedText = whisperResponse.data.text.trim();
    console.log('üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', transcribedText);

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.unlinkSync(tempAudioFilePath);

    // üìå **–§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GPT-4o**
    let cachedContext = (await cache.getCache(`audio_context_${chatId}`)) || [];
    cachedContext.push({
      role: 'user',
      content: [{ type: 'text', text: transcribedText }],
    });

    if (cachedContext.length > 3) {
      cachedContext = cachedContext.slice(-3);
    }

    console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ GPT...');
    const gptResponse = await openai.chat.completions.create({
      model: 'gpt-4o-2024-11-20',
      messages: cachedContext,
      max_tokens: 1200,
      temperature: 0.7,
    });

    const botResponse = gptResponse.choices?.[0]?.message?.content?.trim() || '–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π';

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    await cache.setCache(`audio_context_${chatId}`, cachedContext, 450);

    // üìå **–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram**
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const telegramApiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;

    await axios.post(telegramApiUrl, {
      chat_id: chatId,
      text: `üéô *–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å:*\n\n${botResponse}`,
      parse_mode: 'Markdown',
    });

    res.json({ reply: botResponse });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ:', error.response?.data || error.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
  }
});

module.exports = audioBotRouter;
*/