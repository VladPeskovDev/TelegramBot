const express = require('express');
const { User, UserSubscription, UserModelRequest, Subscription, SubscriptionModelLimit } = require('../../db/models'); 
const openai = require('../utils/openai');
const openaiRouter = express.Router();
const cache = require('../utils/cache');
require('dotenv').config();


openaiRouter.route('/model_gpt-4o-mini').post(async (req, res) => {
  const { chatId, userMessage } = req.body;

  if (!userMessage) {
    return res.status(400).json({ error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.' });
  }

  const modelName = "gpt-4o-mini-2024-07-18";
  const cacheKey = `user_${chatId}_gpt-4o-mini`;
  const contextKey = `user_${chatId}_gpt-4o-mini_context`;

  try {
    let userCache = cache.getCache(cacheKey);
    let userContext = cache.getCache(contextKey) || [];

    if (!userCache) {
      
      const user = await User.findOne({ where: { telegram_id: chatId } });
      if (!user) {
        return res.status(403).json({
          error: '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.',
        });
      }

      const activeSubscription = await UserSubscription.findOne({
        where: { user_id: user.id },
        include: [{ model: Subscription, as: 'subscription' }],
        order: [['end_date', 'DESC']],
      });

      if (!activeSubscription || new Date(activeSubscription.end_date) < new Date()) {
        return res.status(403).json({
          error: '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.',
        });
      }

      const subscriptionLimit = await SubscriptionModelLimit.findOne({
        where: { subscription_id: activeSubscription.subscription_id, model_id: 3 },
      });

      const userModelRequest = await UserModelRequest.findOne({
        where: { user_id: user.id, subscription_id: activeSubscription.id, model_id: 3 },
      });

      const currentRequestCount = userModelRequest ? userModelRequest.request_count : 0;

      userCache = {
        userId: user.id,
        subscriptionId: activeSubscription.id,
        requestsLimit: subscriptionLimit.requests_limit,
        requestCount: currentRequestCount,
        syncing: false,
        modelId: 3,
      };

      cache.setCache(cacheKey, userCache, 300); // –ö—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç
    }

    if (userCache.requestCount >= userCache.requestsLimit) {
      return res.status(403).json({
        error: `–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (${userCache.requestsLimit}) –¥–ª—è –º–æ–¥–µ–ª–∏ ${modelName}.`,
      });
    }

    userCache.requestCount += 1;
    cache.setCache(cacheKey, userCache, 300);

    if (userCache.requestCount % 5 === 0 && !userCache.syncing) {
      userCache.syncing = true;
      await UserModelRequest.upsert({
        user_id: userCache.userId,
        subscription_id: userCache.subscriptionId,
        model_id: userCache.modelId,
        request_count: userCache.requestCount,
      }, {
        where: {
          user_id: userCache.userId,
          subscription_id: userCache.subscriptionId,
          model_id: userCache.modelId,
        }
      });
      userCache.syncing = false;
      cache.setCache(cacheKey, userCache, 300);
    }

    userContext.push({ role: 'user', content: userMessage });
    if (userContext.length > 2) {
      userContext = userContext.slice(-2);
    }

    const response = await openai.chat.completions.create({
      model: modelName,
      messages: userContext,
      max_tokens: 1250,
      temperature: 0.7,
    });

    const botResponse = response.choices?.[0]?.message?.content?.trim() || '–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π';

    userContext.push({ role: 'assistant', content: botResponse });
    if (userContext.length > 2) {
      userContext = userContext.slice(-2);
    }
    cache.setCache(contextKey, userContext, 300);

    if (botResponse.length <= 5000) {
      cache.setCache(`response_${chatId}_${userMessage}`, botResponse, 300);
    }

    res.json({ reply: botResponse });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    res.status(500).json({ error: error.message || '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
  }
});

//------------------>—Å–ª–µ–¥—É—é—â–∏–π endpoint<----------------

openaiRouter.route('/model4').post(async (req, res) => {
  const { chatId, userMessage } = req.body;

  if (!userMessage) {
    return res.status(400).json({ error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.' });
  }

  const modelName = "gpt-4o-2024-05-13";
  const cacheKey = `user_${chatId}_model4`;
  const contextKey = `user_${chatId}_model4_context`;

  try {
    // üîÑ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞
    let userCache = cache.getCache(cacheKey);
    let userContext = cache.getCache(contextKey) || [];

    if (!userCache) {
      console.log('üîÑ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫—ç—à–µ. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ –ë–î...');

      // üßë‚Äçüíª –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findOne({ where: { telegram_id: chatId } });
      if (!user) {
        return res.status(403).json({
          error: '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.',
        });
      }

      // üìÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      const activeSubscription = await UserSubscription.findOne({
        where: { user_id: user.id },
        include: [{ model: Subscription, as: 'subscription' }],
        order: [['end_date', 'DESC']],
      });

      if (!activeSubscription || new Date(activeSubscription.end_date) < new Date()) {
        return res.status(403).json({
          error: '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.',
        });
      }

      // üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
      const subscriptionLimit = await SubscriptionModelLimit.findOne({
        where: { subscription_id: activeSubscription.subscription_id, model_id: 2 },
      });

      if (!subscriptionLimit) {
        return res.status(400).json({ error: '–õ–∏–º–∏—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.' });
      }

      // üìà –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á—ë—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
      const userModelRequest = await UserModelRequest.findOne({
        where: { user_id: user.id, subscription_id: activeSubscription.id, model_id: 2 },
      });

      const currentRequestCount = userModelRequest ? userModelRequest.request_count : 0;

      // üóÇÔ∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      userCache = {
        userId: user.id,
        subscriptionId: activeSubscription.id,
        modelId: 2,
        requestsLimit: subscriptionLimit.requests_limit,
        requestCount: currentRequestCount,
        syncing: false,
      };

      cache.setCache(cacheKey, userCache, 300); // –ö—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç
    } else {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫—ç—à–∞.');
    }

    // üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    if (userCache.requestCount >= userCache.requestsLimit) {
      return res.status(403).json({
        error: `–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (${userCache.requestsLimit}) –¥–ª—è –º–æ–¥–µ–ª–∏ ${modelName}.`,
      });
    }

    // üßÆ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
    userCache.requestCount += 1;
    cache.setCache(cacheKey, userCache, 300);

    // üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤
    if (userCache.requestCount % 5 === 0 && !userCache.syncing) {
      userCache.syncing = true;
      console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—á—ë—Ç—á–∏–∫–∞ —Å –ë–î (5 –∑–∞–ø—Ä–æ—Å–æ–≤)...');
      await UserModelRequest.upsert({
        user_id: userCache.userId,
        subscription_id: userCache.subscriptionId,
        model_id: userCache.modelId,
        request_count: userCache.requestCount,
      }, {
        where: {
          user_id: userCache.userId,
          subscription_id: userCache.subscriptionId,
          model_id: userCache.modelId,
        }
      });
      userCache.syncing = false;
      cache.setCache(cacheKey, userCache, 300);
    }

    // üí¨ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    userContext.push({ role: 'user', content: userMessage });

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è)
    if (userContext.length > 2) {
      userContext = userContext.slice(-2);
    }

    // üì¶ –ó–∞–ø—Ä–æ—Å –∫ OpenAI —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    const response = await openai.chat.completions.create({
      model: modelName,
      messages: userContext,
      max_tokens: 1000,
      temperature: 0.7,
    });

    const botResponse = response.choices?.[0]?.message?.content?.trim() || '–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π';

    // üí¨ –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    userContext.push({ role: 'assistant', content: botResponse });

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è)
    if (userContext.length > 2) {
      userContext = userContext.slice(-2);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –∫—ç—à
    cache.setCache(contextKey, userContext, 300);

    // üóÇÔ∏è –ö—ç—à–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
    if (botResponse.length <= 5000) {
      cache.setCache(`response_${chatId}_${userMessage}`, botResponse, 300);
    }

    res.json({ reply: botResponse });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    res.status(500).json({ error: error.message || '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
  }
});

//------------------>—Å–ª–µ–¥—É—é—â–∏–π endpoint<----------------

openaiRouter.route('/model3.5').post(async (req, res) => {
  const { chatId, userMessage } = req.body;

  if (!userMessage) {
    return res.status(400).json({ error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.' });
  }

  const modelName = "gpt-3.5-turbo";
  const cacheKey = `user_${chatId}_model3.5`;

  try {
    let userCache = cache.getCache(cacheKey);

    if (!userCache) {
      console.log('üîÑ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫—ç—à–µ. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ –ë–î...');

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findOne({ where: { telegram_id: chatId } });
      if (!user) {
        return res.status(403).json({
          error: '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.',
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      const activeSubscription = await UserSubscription.findOne({
        where: { user_id: user.id },
        include: [{ model: Subscription, as: 'subscription' }],
        order: [['end_date', 'DESC']],
      });

      if (!activeSubscription || new Date(activeSubscription.end_date) < new Date()) {
        return res.status(403).json({
          error: '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.',
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
      const subscriptionLimit = await SubscriptionModelLimit.findOne({
        where: {
          subscription_id: activeSubscription.subscription_id,
          model_id: 1,
        },
      });

      if (!subscriptionLimit) {
        return res.status(400).json({ error: '–õ–∏–º–∏—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.' });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á—ë—Ç—á–∏–∫
      const userModelRequest = await UserModelRequest.findOne({
        where: {
          user_id: user.id,
          subscription_id: activeSubscription.id,
          model_id: 1,
        },
      });

      const currentRequestCount = userModelRequest ? userModelRequest.request_count : 0;

      userCache = {
        userId: user.id,
        subscriptionId: activeSubscription.id,
        modelId: 1,
        requestsLimit: subscriptionLimit.requests_limit,
        requestCount: currentRequestCount,
        syncing: false,
      };

      cache.setCache(cacheKey, userCache, 300); // –ö—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç
    } else {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫—ç—à–∞.');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    if (userCache.requestCount >= userCache.requestsLimit) {
      return res.status(403).json({
        error: `–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (${userCache.requestsLimit}) –¥–ª—è –º–æ–¥–µ–ª–∏ ${modelName}.`,
      });
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –≤ –∫—ç—à–µ
    userCache.requestCount += 1;
    cache.setCache(cacheKey, userCache, 300);

    // üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤
if (userCache.requestCount % 5 === 0 && !userCache.syncing) {
  userCache.syncing = true;
  console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—á—ë—Ç—á–∏–∫–∞ —Å –ë–î (5 –∑–∞–ø—Ä–æ—Å–æ–≤)...');
  await UserModelRequest.upsert({
    user_id: userCache.userId,
    subscription_id: userCache.subscriptionId,
    model_id: userCache.modelId,
    request_count: userCache.requestCount,
  }, {
    conflictFields: ['user_id', 'subscription_id', 'model_id'],
  });
  userCache.syncing = false;
  cache.setCache(cacheKey, userCache, 300);
}

    // üì¶ –ó–∞–ø—Ä–æ—Å –∫ OpenAI
    const response = await openai.chat.completions.create({
      model: modelName,
      messages: [{ role: 'user', content: userMessage }],
      max_tokens: 1000,
      temperature: 0.7,
    });

    const botResponse = response.choices?.[0]?.message?.content?.trim() || '–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π';

    if (botResponse.length <= 5000) {
      cache.setCache(`response_${chatId}_${userMessage}`, botResponse, 300);
    }

    res.json({ reply: botResponse });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    res.status(500).json({ error: error.message || '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
  }
});




module.exports = openaiRouter;


//ngrok http 3000
//model: 'gpt-4o-mini-2024-07-18'




/*    
openaiRouter.route('/model_gpt-4o-mini').post(async (req, res) => {
  const { chatId, userMessage } = req.body;

  if (!userMessage) {
    return res.status(400).json({ error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.' });
  }

  const modelName = "gpt-4o-mini-2024-07-18";
  const cacheKey = `user_${chatId}_gpt-4o-mini`;
  const contextKey = `user_${chatId}_gpt-4o-mini_context`;

  try {
    let userCache = cache.getCache(cacheKey);
    let userContext = cache.getCache(contextKey) || [];

    if (!userCache) {
      
      const user = await User.findOne({ where: { telegram_id: chatId } });
      if (!user) {
        return res.status(403).json({
          error: '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.',
        });
      }

      const activeSubscription = await UserSubscription.findOne({
        where: { user_id: user.id },
        include: [{ model: Subscription, as: 'subscription' }],
        order: [['end_date', 'DESC']],
      });

      if (!activeSubscription || new Date(activeSubscription.end_date) < new Date()) {
        return res.status(403).json({
          error: '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.',
        });
      }

      const subscriptionLimit = await SubscriptionModelLimit.findOne({
        where: { subscription_id: activeSubscription.subscription_id, model_id: 3 },
      });

      const userModelRequest = await UserModelRequest.findOne({
        where: { user_id: user.id, subscription_id: activeSubscription.id, model_id: 3 },
      });

      const currentRequestCount = userModelRequest ? userModelRequest.request_count : 0;

      userCache = {
        userId: user.id,
        subscriptionId: activeSubscription.id,
        requestsLimit: subscriptionLimit.requests_limit,
        requestCount: currentRequestCount,
        syncing: false,
        modelId: 3,
      };

      cache.setCache(cacheKey, userCache, 300); // –ö—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç
    }

    if (userCache.requestCount >= userCache.requestsLimit) {
      return res.status(403).json({
        error: `–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (${userCache.requestsLimit}) –¥–ª—è –º–æ–¥–µ–ª–∏ ${modelName}.`,
      });
    }

    userCache.requestCount += 1;
    cache.setCache(cacheKey, userCache, 300);

    if (userCache.requestCount % 5 === 0 && !userCache.syncing) {
      userCache.syncing = true;
      await UserModelRequest.upsert({
        user_id: userCache.userId,
        subscription_id: userCache.subscriptionId,
        model_id: userCache.modelId,
        request_count: userCache.requestCount,
      }, {
        where: {
          user_id: userCache.userId,
          subscription_id: userCache.subscriptionId,
          model_id: userCache.modelId,
        }
      });
      userCache.syncing = false;
      cache.setCache(cacheKey, userCache, 300);
    }

    userContext.push({ role: 'user', content: userMessage });
    if (userContext.length > 2) {
      userContext = userContext.slice(-2);
    }

    const response = await openai.chat.completions.create({
      model: modelName,
      messages: userContext,
      max_tokens: 1250,
      temperature: 0.7,
    });

    const botResponse = response.choices?.[0]?.message?.content?.trim() || '–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π';

    userContext.push({ role: 'assistant', content: botResponse });
    if (userContext.length > 2) {
      userContext = userContext.slice(-2);
    }
    cache.setCache(contextKey, userContext, 300);

    if (botResponse.length <= 5000) {
      cache.setCache(`response_${chatId}_${userMessage}`, botResponse, 300);
    }

    res.json({ reply: botResponse });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    res.status(500).json({ error: error.message || '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
  }
});

*/