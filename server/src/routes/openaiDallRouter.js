const express = require('express');
const { User, UserSubscription, UserModelRequest, Subscription, SubscriptionModelLimit } = require('../../db/models'); 
const openai = require('../utils/openai');
const openaiDallRouter = express.Router();
const cache = require('../utils/cache');
require('dotenv').config();

openaiDallRouter.route('/model_dall-e-2').post(async (req, res) => {
    const { chatId, userMessage } = req.body;

    if (!userMessage) {
        return res.status(400).json({ error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.' });
    }

    const modelName = "dall-e-2";
    const cacheKey = `user_${chatId}_dall-e-2`;

    try {
        let userCache = cache.getCache(cacheKey);

        if (!userCache) {
            console.log('üîÑ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫—ç—à–µ. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ –ë–î...');

            const user = await User.findOne({ where: { telegram_id: chatId } });
            if (!user) {
                return res.status(403).json({
                    error: '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.',
                });
            }

            const activeSubscription = await UserSubscription.findOne({
                where: { user_id: user.id },
                include: [{ model: Subscription, as: 'subscription' }],
                order: [['end_date', 'DESC']],
            });

            if (!activeSubscription || new Date(activeSubscription.end_date) < new Date()) {
                return res.status(403).json({
                    error: '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.',
                });
            }

            const subscriptionLimit = await SubscriptionModelLimit.findOne({
                where: { subscription_id: activeSubscription.subscription_id, model_id: 5 },
            });

            const userModelRequest = await UserModelRequest.findOne({
                where: { user_id: user.id, subscription_id: activeSubscription.id, model_id: 5 },
            });

            const currentRequestCount = userModelRequest ? userModelRequest.request_count : 0;

            userCache = {
                userId: user.id,
                subscriptionId: activeSubscription.id,
                requestsLimit: subscriptionLimit.requests_limit,
                requestCount: currentRequestCount,
                syncing: false,
                modelId: 5,
            };

            cache.setCache(cacheKey, userCache, 300); // –ö—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç
        } else {
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫—ç—à–∞.');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        if (userCache.requestCount >= userCache.requestsLimit) {
            return res.status(403).json({
                error: `–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (${userCache.requestsLimit}) –¥–ª—è –º–æ–¥–µ–ª–∏ ${modelName}.`,
            });
        }

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –≤ –∫—ç—à–µ
        userCache.requestCount += 1;
        cache.setCache(cacheKey, userCache, 300);

        // üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤
        if (userCache.requestCount % 5 === 0 && !userCache.syncing) {
            userCache.syncing = true;
            console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—á—ë—Ç—á–∏–∫–∞ —Å –ë–î (5 –∑–∞–ø—Ä–æ—Å–æ–≤)...');
            await UserModelRequest.upsert({
                user_id: userCache.userId,
                subscription_id: userCache.subscriptionId,
                model_id: userCache.modelId,
                request_count: userCache.requestCount,
            }, {
                where: {
                    user_id: userCache.userId,
                    subscription_id: userCache.subscriptionId,
                    model_id: userCache.modelId,
                }
            });
            userCache.syncing = false;
            cache.setCache(cacheKey, userCache, 300);
        }

        // üì¶ –ó–∞–ø—Ä–æ—Å –∫ OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const response = await openai.images.generate({
        model: modelName,
        prompt: userMessage,
        size: '1024x1024',
        n: 1,
        });

        console.log('üñºÔ∏è –û—Ç–≤–µ—Ç –æ—Ç OpenAI:', response.data);
        const imageUrl = response.data?.data?.[0]?.url || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ';

        console.log('üåê –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', imageUrl);
        res.json({ imageUrl });
 
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
        res.status(500).json({ error: error.message || '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
    }
});

module.exports = openaiDallRouter;
