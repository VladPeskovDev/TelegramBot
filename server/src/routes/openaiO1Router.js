const express = require('express');
const { User, UserSubscription, UserModelRequest, Subscription, SubscriptionModelLimit } = require('../../db/models');
const openai = require('../utils/openai');
const cache = require('../utils/cacheRedis'); 
require('dotenv').config();

const openaiO1Router = express.Router();


const MAIN_KEY_TTL = 300;     // –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á –∂–∏–≤—ë—Ç 300 —Å–µ–∫
const TRIGGER_KEY_TTL = 298;  // —Ç—Ä–∏–≥–≥–µ—Ä –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–Ω—å—à–µ

openaiO1Router.post('/model_o1-mini-2024-09-12', async (req, res) => {
  const { chatId, userMessage } = req.body;

  if (!userMessage) {
    return res.status(400).json({ error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.' });
  }

  const modelName = 'o1-mini-2024-09-12';
  const mainKey = `user_${chatId}_o1-mini-2024-09-12`;
  const triggerKey = `trigger_${chatId}_o1-mini-2024-09-12`;
  const contextKey = `user_${chatId}_o1-mini-2024-09-12_context`;

  try {
    let userCache = await cache.getCache(mainKey);
    let userContext = await cache.getCache(contextKey);
    if (!userContext) {
      userContext = [];
    }

  
    if (!userCache) {
      console.log(`[DEBUG] userCache –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Redis, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î...`);

      const user = await User.findOne({ where: { telegram_id: chatId } });
      if (!user) {
        return res.status(403).json({
          error: '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.',
        });
      }

      const activeSubscription = await UserSubscription.findOne({
        where: { user_id: user.id },
        include: [{ model: Subscription, as: 'subscription' }],
        order: [['end_date', 'DESC']],
      });

      if (!activeSubscription || new Date(activeSubscription.end_date) < new Date()) {
        return res.status(403).json({
          error: '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.',
        });
      }

      const subscriptionPlanId = activeSubscription.subscription.id;

      const subscriptionLimit = await SubscriptionModelLimit.findOne({
        where: { 
          subscription_id: subscriptionPlanId,
          model_id: 4, 
        },
      });

      const userModelRequest = await UserModelRequest.findOne({
        where: { 
          user_id: user.id,
          model_id: 4,
        },
      });

      const currentRequestCount = userModelRequest ? userModelRequest.request_count : 0;

      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç
      userCache = {
        userId: user.id,
        requestsLimit: subscriptionLimit.requests_limit,
        requestCount: currentRequestCount,
        syncing: false,
        modelId: 4, // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ ID –º–æ–¥–µ–ª–∏ = 4
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á (TTL=300)
      await cache.setCache(mainKey, userCache, MAIN_KEY_TTL);
      // –°—Ç–∞–≤–∏–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä-–∫–ª—é—á (TTL=298)
      await cache.setCache(triggerKey, '1', TRIGGER_KEY_TTL);

    } 
    // 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if (userCache.requestCount >= userCache.requestsLimit) {
      return res.status(403).json({
        error: `–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç (${userCache.requestsLimit}) –¥–ª—è –º–æ–¥–µ–ª–∏ ${modelName}.`,
      });
    }

    // 4) –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
    userCache.requestCount += 1;

    // (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤
    if (userCache.requestCount % 5 === 0 && !userCache.syncing) {
      console.log(`[DEBUG] –ö—Ä–∞—Ç–Ω—ã–π 5 –∑–∞–ø—Ä–æ—Å => Sync –≤ –ë–î`);
      userCache.syncing = true;
      try {
        await UserModelRequest.upsert({
          user_id: userCache.userId,
          model_id: userCache.modelId,
          request_count: userCache.requestCount,
        }, {
          where: {
            user_id: userCache.userId,
            model_id: userCache.modelId,
          }
        });
        console.log(`[DEBUG] Sync –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ (count=${userCache.requestCount})`);
      } catch (err) {
        console.error(`[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å sync upsert:`, err.message);
      } finally {
        userCache.syncing = false;
      }
    }

    // –û–±–Ω–æ–≤–∏–º –∫–ª—é—á–∏ –≤ Redis (–ø—Ä–æ–¥–ª–µ–≤–∞–µ–º TTL)
    await cache.setCache(mainKey, userCache, MAIN_KEY_TTL);
    await cache.setCache(triggerKey, '1', TRIGGER_KEY_TTL);

    // 5) –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç + –∑–∞–ø—Ä–æ—Å –∫ OpenAI
    userContext.push({ role: 'user', content: userMessage });
    if (userContext.length > 2) {
      userContext = userContext.slice(-2);
    }

    // –ó–∞–ø—Ä–æ—Å –∫ OpenAI
    const response = await openai.chat.completions.create({
      model: modelName,
      messages: userContext,
      max_completion_tokens: 1500,
    });

    const botResponse = response?.choices?.[0]?.message?.content?.trim() || '–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π';

    // 6) –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞, —Å–Ω–æ–≤–∞ –æ–±—Ä–µ–∑–∞–µ–º –¥–æ 2 —Å–æ–æ–±—â–µ–Ω–∏–π
    userContext.push({ role: 'assistant', content: botResponse });
    if (userContext.length > 2) {
      userContext = userContext.slice(-2);
    }

    // 7) –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (TTL=300)
    await cache.setCache(contextKey, userContext, MAIN_KEY_TTL);

    // (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ö—ç—à–∏—Ä—É–µ–º —Å–∞–º –æ—Ç–≤–µ—Ç
    if (botResponse.length <= 5000) {
      const responseKey = `response_${chatId}_${userMessage}`;
      await cache.setCache(responseKey, botResponse, MAIN_KEY_TTL);
    }

    // 8) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    res.json({ reply: botResponse });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    res.status(500).json({ error: error.message || '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
  }
});

module.exports = openaiO1Router;





/*  
const express = require('express');
const { User, UserSubscription, UserModelRequest, Subscription, SubscriptionModelLimit } = require('../../db/models'); 
const openai = require('../utils/openai');
const openaiO1Router = express.Router();
const cache = require('../utils/cache');
require('dotenv').config();

openaiO1Router.route('/model_o1-mini-2024-09-12').post(async (req, res) => {
    const { chatId, userMessage } = req.body;
  
    if (!userMessage) {
      return res.status(400).json({ error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.' });
    }
  
    const modelName = "o1-mini-2024-09-12";
    const cacheKey = `user_${chatId}_o1-mini-2024-09-12`;
    const contextKey = `user_${chatId}_o1-mini-2024-09-12_context`;
  
    try {
      let userCache = cache.getCache(cacheKey);
      let userContext = cache.getCache(contextKey) || [];
  
      if (!userCache) {
        
        const user = await User.findOne({ where: { telegram_id: chatId } });
        if (!user) {
          return res.status(403).json({
            error: '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.',
          });
        }
  
        const activeSubscription = await UserSubscription.findOne({
          where: { user_id: user.id },
          include: [{ model: Subscription, as: 'subscription' }],
          order: [['end_date', 'DESC']],
        });
  
        if (!activeSubscription || new Date(activeSubscription.end_date) < new Date()) {
          return res.status(403).json({
            error: '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.',
          });
        }
  
        const subscriptionLimit = await SubscriptionModelLimit.findOne({
          where: { subscription_id: activeSubscription.subscription_id, model_id: 4 },
        });
  
        const userModelRequest = await UserModelRequest.findOne({
          where: { user_id: user.id, subscription_id: activeSubscription.id, model_id: 4 },
        });
  
        const currentRequestCount = userModelRequest ? userModelRequest.request_count : 0;
  
        userCache = {
          userId: user.id,
          subscriptionId: activeSubscription.id,
          requestsLimit: subscriptionLimit.requests_limit,
          requestCount: currentRequestCount,
          syncing: false,
          modelId: 4,
        };
  
        cache.setCache(cacheKey, userCache, 300); // –ö—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç
      } 
  
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
      if (userCache.requestCount >= userCache.requestsLimit) {
        return res.status(403).json({
          error: `–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (${userCache.requestsLimit}) –¥–ª—è –º–æ–¥–µ–ª–∏ ${modelName}.`,
        });
      }
  
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –≤ –∫—ç—à–µ
      userCache.requestCount += 1;
      cache.setCache(cacheKey, userCache, 300);
  
      // üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤
      if (userCache.requestCount % 5 === 0 && !userCache.syncing) {
        userCache.syncing = true;
        await UserModelRequest.upsert({
          user_id: userCache.userId,
          subscription_id: userCache.subscriptionId,
          model_id: userCache.modelId,
          request_count: userCache.requestCount,
        }, {
          where: {
            user_id: userCache.userId,
            subscription_id: userCache.subscriptionId,
            model_id: userCache.modelId,
          }
        });
        userCache.syncing = false;
        cache.setCache(cacheKey, userCache, 300);
      }
  
      // üì¶ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      userContext.push({ role: 'user', content: userMessage });
      
      // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è
      if (userContext.length > 2) {
        userContext = userContext.slice(-2);
      }
  
      // üì¶ –ó–∞–ø—Ä–æ—Å –∫ OpenAI
      const response = await openai.chat.completions.create({
        model: modelName,
        messages: userContext,
        max_completion_tokens: 1500,
      });
  
      const botResponse = response.choices?.[0]?.message?.content?.trim() || '–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π';
  
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      userContext.push({ role: 'assistant', content: botResponse });
      
      // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è
      if (userContext.length > 2) {
        userContext = userContext.slice(-2);
      }
  
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –∫—ç—à–µ
      cache.setCache(contextKey, userContext, 300); // –ö—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç
  
      if (botResponse.length <= 5000) {
        cache.setCache(`response_${chatId}_${userMessage}`, botResponse, 300); // –ö—ç—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      }
  
      res.json({ reply: botResponse });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
      res.status(500).json({ error: error.message || '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
    }
});
  
module.exports = openaiO1Router;

*/