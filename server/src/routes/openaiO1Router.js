const express = require('express');
const { User, UserSubscription, UserModelRequest, Subscription, SubscriptionModelLimit } = require('../../db/models'); 
const openai = require('../utils/openai');
const openaiO1Router = express.Router();
const cache = require('../utils/cache');
require('dotenv').config();

openaiO1Router.route('/model_o1-mini-2024-09-12').post(async (req, res) => {
    const { chatId, userMessage } = req.body;
  
    if (!userMessage) {
      return res.status(400).json({ error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.' });
    }
  
    const modelName = "o1-mini-2024-09-12";
    const cacheKey = `user_${chatId}_o1-mini-2024-09-12`;
    const contextKey = `user_${chatId}_o1-mini-2024-09-12_context`;
  
    try {
      let userCache = cache.getCache(cacheKey);
      let userContext = cache.getCache(contextKey) || [];
  
      if (!userCache) {
        
        const user = await User.findOne({ where: { telegram_id: chatId } });
        if (!user) {
          return res.status(403).json({
            error: '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.',
          });
        }
  
        const activeSubscription = await UserSubscription.findOne({
          where: { user_id: user.id },
          include: [{ model: Subscription, as: 'subscription' }],
          order: [['end_date', 'DESC']],
        });
  
        if (!activeSubscription || new Date(activeSubscription.end_date) < new Date()) {
          return res.status(403).json({
            error: '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.',
          });
        }
  
        const subscriptionLimit = await SubscriptionModelLimit.findOne({
          where: { subscription_id: activeSubscription.subscription_id, model_id: 4 },
        });
  
        const userModelRequest = await UserModelRequest.findOne({
          where: { user_id: user.id, subscription_id: activeSubscription.id, model_id: 4 },
        });
  
        const currentRequestCount = userModelRequest ? userModelRequest.request_count : 0;
  
        userCache = {
          userId: user.id,
          subscriptionId: activeSubscription.id,
          requestsLimit: subscriptionLimit.requests_limit,
          requestCount: currentRequestCount,
          syncing: false,
          modelId: 4,
        };
  
        cache.setCache(cacheKey, userCache, 300); // –ö—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç
      } 
  
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
      if (userCache.requestCount >= userCache.requestsLimit) {
        return res.status(403).json({
          error: `–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (${userCache.requestsLimit}) –¥–ª—è –º–æ–¥–µ–ª–∏ ${modelName}.`,
        });
      }
  
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –≤ –∫—ç—à–µ
      userCache.requestCount += 1;
      cache.setCache(cacheKey, userCache, 300);
  
      // üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤
      if (userCache.requestCount % 5 === 0 && !userCache.syncing) {
        userCache.syncing = true;
        await UserModelRequest.upsert({
          user_id: userCache.userId,
          subscription_id: userCache.subscriptionId,
          model_id: userCache.modelId,
          request_count: userCache.requestCount,
        }, {
          where: {
            user_id: userCache.userId,
            subscription_id: userCache.subscriptionId,
            model_id: userCache.modelId,
          }
        });
        userCache.syncing = false;
        cache.setCache(cacheKey, userCache, 300);
      }
  
      // üì¶ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      userContext.push({ role: 'user', content: userMessage });
      
      // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è
      if (userContext.length > 2) {
        userContext = userContext.slice(-2);
      }
  
      // üì¶ –ó–∞–ø—Ä–æ—Å –∫ OpenAI
      const response = await openai.chat.completions.create({
        model: modelName,
        messages: userContext,
        max_completion_tokens: 1500,
      });
  
      const botResponse = response.choices?.[0]?.message?.content?.trim() || '–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π';
  
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      userContext.push({ role: 'assistant', content: botResponse });
      
      // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è
      if (userContext.length > 2) {
        userContext = userContext.slice(-2);
      }
  
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –∫—ç—à–µ
      cache.setCache(contextKey, userContext, 300); // –ö—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç
  
      if (botResponse.length <= 5000) {
        cache.setCache(`response_${chatId}_${userMessage}`, botResponse, 300); // –ö—ç—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      }
  
      res.json({ reply: botResponse });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
      res.status(500).json({ error: error.message || '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
    }
});
  
module.exports = openaiO1Router;
