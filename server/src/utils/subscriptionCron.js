const { UserSubscription, UserModelRequest } = require('../../db/models');
const { Op } = require('sequelize');
const loggerWinston = require('../metrics/loggerWinston');

async function subscription() {
  loggerWinston.info('üïí [CRON JOB] –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ª–∏–º–∏—Ç–æ–≤...');
  try {
    const now = new Date();
    const nextMonth = new Date(new Date().setMonth(now.getMonth() + 1));

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç—ë–∫—à–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ –∏ –ø–ª–∞—Ç–Ω—ã–º–∏)
    const expiredSubs = await UserSubscription.findAll({
      where: { end_date: { [Op.lte]: now } },
      attributes: ['user_id', 'subscription_id'],
    });

    if (expiredSubs.length > 0) {
      const freeSubs = expiredSubs.filter((sub) => sub.subscription_id === 1);
      const paidSubs = expiredSubs.filter((sub) => sub.subscription_id !== 1);

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
      if (freeSubs.length > 0) {
        const freeUserIds = freeSubs.map((sub) => sub.user_id);
        const updatedCount = await UserSubscription.update(
          {
            start_date: now,
            end_date: nextMonth,
          },
          {
            where: {
              subscription_id: 1,
              user_id: { [Op.in]: freeUserIds },
            },
          }
        );
        loggerWinston.info(`‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${updatedCount[0]} –∑–∞–ø–∏—Å–µ–π`);

        const resetCount = await UserModelRequest.update(
          { request_count: 0 },
          {
            where: { user_id: { [Op.in]: freeUserIds } },
          }
        );
        loggerWinston.info(`‚úÖ –õ–∏–º–∏—Ç—ã –¥–ª—è –ø—Ä–æ–¥–ª—ë–Ω–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —Å–±—Ä–æ—à–µ–Ω—ã: ${resetCount[0]} –∑–∞–ø–∏—Å–µ–π`);
      }

      // –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ
      if (paidSubs.length > 0) {
        const paidUserIds = paidSubs.map((sub) => sub.user_id);
        const downgradedCount = await UserSubscription.update(
          {
            subscription_id: 1,
            start_date: now,
            end_date: nextMonth,
          },
          {
            where: {
              subscription_id: { [Op.ne]: 1 },
              user_id: { [Op.in]: paidUserIds },
            },
          }
        );
        loggerWinston.info(`‚úÖ –ò—Å—Ç–µ–∫—à–∏–µ –ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ: ${downgradedCount[0]} –∑–∞–ø–∏—Å–µ–π`);

        const resetCount = await UserModelRequest.update(
          { request_count: 0 },
          {
            where: { user_id: { [Op.in]: paidUserIds } },
          }
        );
        loggerWinston.info(`‚úÖ –õ–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π —Å–±—Ä–æ—à–µ–Ω—ã: ${resetCount[0]} –∑–∞–ø–∏—Å–µ–π`);
      }
    } else {
      loggerWinston.info('‚úÖ –ù–µ—Ç –∏—Å—Ç—ë–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.');
    }

    loggerWinston.info('‚úÖ [CRON JOB] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  } catch (error) {
    loggerWinston.error(`‚ùå –û—à–∏–±–∫–∞ –≤ Cron Job: ${error.message}`);
  }
}

module.exports = { subscription };















