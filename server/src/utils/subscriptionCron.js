/* const { UserSubscription, UserModelRequest } = require('../../db/models');
const { Op } = require('sequelize');

async function subscription() {
  console.log('üïí [CRON JOB] –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ª–∏–º–∏—Ç–æ–≤...');
  try {
    const now = new Date();
    const nextMonth = new Date(new Date().setMonth(now.getMonth() + 1));

    // 1. –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –∏—Å—Ç—ë–∫—à–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    const expiredFreeSubs = await UserSubscription.findAll({
      where: {
        subscription_id: 1,
        end_date: { [Op.lte]: now },
      },
      attributes: ['user_id'],
    });

    if (expiredFreeSubs.length > 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
      const updatedCount = await UserSubscription.update(
        {
          start_date: now,
          end_date: nextMonth,
        },
        {
          where: {
            subscription_id: 1,
            end_date: { [Op.lte]: now },
          },
        }
      );
      console.log(`‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${updatedCount[0]} –∑–∞–ø–∏—Å–µ–π`);

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç—ã —Ç–æ–ª—å–∫–æ —ç—Ç–∏–º user_id
      const userIds = expiredFreeSubs.map((sub) => sub.user_id);
      const resetCount = await UserModelRequest.update(
        { request_count: 0 },
        {
          where: {
            user_id: { [Op.in]: userIds },
          },
        }
      );
      console.log(`‚úÖ –õ–∏–º–∏—Ç—ã –¥–ª—è –ø—Ä–æ–¥–ª—ë–Ω–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —Å–±—Ä–æ—à–µ–Ω—ã: ${resetCount[0]} –∑–∞–ø–∏—Å–µ–π`);
    } else {
      console.log('‚úÖ –ù–µ—Ç –∏—Å—Ç—ë–∫—à–∏—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.');
    }

    // 2. –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏—Å—Ç—ë–∫—à–∏–µ –ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é
    const expiredPaidSubs = await UserSubscription.findAll({
      where: {
        subscription_id: { [Op.ne]: 1 }, // –ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        end_date: { [Op.lte]: now },
      },
      attributes: ['user_id'],
    });

    if (expiredPaidSubs.length > 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º
      const downgradedCount = await UserSubscription.update(
        {
          subscription_id: 1,
          start_date: now,
          end_date: nextMonth,
        },
        {
          where: {
            subscription_id: { [Op.ne]: 1 },
            end_date: { [Op.lte]: now },
          },
        }
      );
      console.log(`‚úÖ –ò—Å—Ç–µ–∫—à–∏–µ –ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ: ${downgradedCount[0]} –∑–∞–ø–∏—Å–µ–π`);

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç—ã —Ç–æ–ª—å–∫–æ —ç—Ç–∏–º user_id
      const userIds = expiredPaidSubs.map((sub) => sub.user_id);
      const resetCount = await UserModelRequest.update(
        { request_count: 0 },
        {
          where: {
            user_id: { [Op.in]: userIds },
          },
        }
      );
      console.log(`‚úÖ –õ–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π —Å–±—Ä–æ—à–µ–Ω—ã: ${resetCount[0]} –∑–∞–ø–∏—Å–µ–π`);
    } else {
      console.log('‚úÖ –ù–µ—Ç –∏—Å—Ç—ë–∫—à–∏—Ö –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é.');
    }

    console.log('‚úÖ [CRON JOB] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ Cron Job:', error.message);
  }
}

module.exports = { subscription }; */

const { UserSubscription, UserModelRequest } = require('../../db/models');
const { Op } = require('sequelize');
const loggerWinston = require('../utils/loggerWinston'); 

async function subscription() {
  loggerWinston.info('üïí [CRON JOB] –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ª–∏–º–∏—Ç–æ–≤...');
  try {
    const now = new Date();
    const nextMonth = new Date(new Date().setMonth(now.getMonth() + 1));

    // 1. –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –∏—Å—Ç—ë–∫—à–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    const expiredFreeSubs = await UserSubscription.findAll({
      where: {
        subscription_id: 1,
        end_date: { [Op.lte]: now },
      },
      attributes: ['user_id'],
    });

    if (expiredFreeSubs.length > 0) {
      const updatedCount = await UserSubscription.update(
        {
          start_date: now,
          end_date: nextMonth,
        },
        {
          where: {
            subscription_id: 1,
            end_date: { [Op.lte]: now },
          },
        }
      );
      loggerWinston.info(`‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${updatedCount[0]} –∑–∞–ø–∏—Å–µ–π`);

      const userIds = expiredFreeSubs.map((sub) => sub.user_id);
      const resetCount = await UserModelRequest.update(
        { request_count: 0 },
        {
          where: {
            user_id: { [Op.in]: userIds },
          },
        }
      );
      loggerWinston.info(`‚úÖ –õ–∏–º–∏—Ç—ã –¥–ª—è –ø—Ä–æ–¥–ª—ë–Ω–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —Å–±—Ä–æ—à–µ–Ω—ã: ${resetCount[0]} –∑–∞–ø–∏—Å–µ–π`);
    } else {
      loggerWinston.info('‚úÖ –ù–µ—Ç –∏—Å—Ç—ë–∫—à–∏—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.');
    }

    // 2. –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏—Å—Ç—ë–∫—à–∏–µ –ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é
    const expiredPaidSubs = await UserSubscription.findAll({
      where: {
        subscription_id: { [Op.ne]: 1 },
        end_date: { [Op.lte]: now },
      },
      attributes: ['user_id'],
    });

    if (expiredPaidSubs.length > 0) {
      const downgradedCount = await UserSubscription.update(
        {
          subscription_id: 1,
          start_date: now,
          end_date: nextMonth,
        },
        {
          where: {
            subscription_id: { [Op.ne]: 1 },
            end_date: { [Op.lte]: now },
          },
        }
      );
      loggerWinston.info(`‚úÖ –ò—Å—Ç–µ–∫—à–∏–µ –ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ: ${downgradedCount[0]} –∑–∞–ø–∏—Å–µ–π`);

      const userIds = expiredPaidSubs.map((sub) => sub.user_id);
      const resetCount = await UserModelRequest.update(
        { request_count: 0 },
        {
          where: {
            user_id: { [Op.in]: userIds },
          },
        }
      );
      loggerWinston.info(`‚úÖ –õ–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π —Å–±—Ä–æ—à–µ–Ω—ã: ${resetCount[0]} –∑–∞–ø–∏—Å–µ–π`);
    } else {
      loggerWinston.info('‚úÖ –ù–µ—Ç –∏—Å—Ç—ë–∫—à–∏—Ö –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é.');
    }

    loggerWinston.info('‚úÖ [CRON JOB] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  } catch (error) {
    loggerWinston.error(`‚ùå –û—à–∏–±–∫–∞ –≤ Cron Job: ${error.message}`);
  }
}

module.exports = { subscription };

