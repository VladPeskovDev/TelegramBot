const { UserSubscription, UserModelRequest } = require('../../db/models');
const { Op } = require('sequelize');

async function subscription() {
  console.log('üïí [CRON JOB] –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ª–∏–º–∏—Ç–æ–≤...');

  try {
    const now = new Date(); // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    const nextMonth = new Date(new Date().setMonth(now.getMonth() + 1)); // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ + 1 –º–µ—Å—è—Ü

    // 1Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –Ω–∞ –º–µ—Å—è—Ü, –æ–±–Ω–æ–≤–ª—è–µ–º start_date)
    const updatedFreeSubscriptions = await UserSubscription.update(
      {
        start_date: now,
        end_date: nextMonth
      },
      {
        where: {
          subscription_id: 1, // –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
          end_date: { [Op.lte]: now }
        }
      }
    );
    console.log(`‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${updatedFreeSubscriptions[0]} –∑–∞–ø–∏—Å–µ–π`);

    // 2Ô∏è‚É£ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const resetFreeLimits = await UserModelRequest.update(
      { request_count: 0 },
      {
        where: {
          user_id: {
            [Op.in]: (
              await UserSubscription.findAll({
                attributes: ['user_id'],
                where: {
                  subscription_id: 1,
                  end_date: { [Op.lte]: now }
                }
              })
            ).map((sub) => sub.user_id)
          }
        }
      }
    );
    console.log(`‚úÖ –õ–∏–º–∏—Ç—ã –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —Å–±—Ä–æ—à–µ–Ω—ã: ${resetFreeLimits[0]} –∑–∞–ø–∏—Å–µ–π`);

    // 3Ô∏è‚É£ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ (–æ–±–Ω–æ–≤–ª—è–µ–º start_date –∏ end_date)
    const downgradedSubscriptions = await UserSubscription.update(
      {
        subscription_id: 1, // ID –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        start_date: now,
        end_date: nextMonth
      },
      {
        where: {
          subscription_id: { [Op.ne]: 1 }, // –ò—Å–∫–ª—é—á–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
          end_date: { [Op.lte]: now }
        }
      }
    );
    console.log(`‚úÖ –ò—Å—Ç–µ–∫—à–∏–µ –ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ: ${downgradedSubscriptions[0]} –∑–∞–ø–∏—Å–µ–π`);

    // 4Ô∏è‚É£ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
    const resetPaidToFreeLimits = await UserModelRequest.update(
      { request_count: 0 },
      {
        where: {
          user_id: {
            [Op.in]: (
              await UserSubscription.findAll({
                attributes: ['user_id'],
                where: {
                  subscription_id: 1,
                  end_date: { [Op.gte]: now }
                }
              })
            ).map((sub) => sub.user_id)
          }
        }
      }
    );
    console.log(`‚úÖ –õ–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π —Å–±—Ä–æ—à–µ–Ω—ã: ${resetPaidToFreeLimits[0]} –∑–∞–ø–∏—Å–µ–π`);

    console.log('‚úÖ [CRON JOB] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ Cron Job:', error.message);
  }
}

module.exports = { subscription };

